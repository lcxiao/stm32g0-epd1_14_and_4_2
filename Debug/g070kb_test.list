
g070kb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003104  08003104  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003104  08003104  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800310c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08003174  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08003174  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c691  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6c  00000000  00000000  0002c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007dc  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001669f  00000000  00000000  0002f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d123  00000000  00000000  00045d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089910  00000000  00000000  00052e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002990  00000000  00000000  000dc7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000df138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800306c 	.word	0x0800306c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	0800306c 	.word	0x0800306c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init ();
 800021c:	f000 fbb0 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config ();
 8000220:	f000 f816 	bl	8000250 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init ();
 8000224:	f000 f91e 	bl	8000464 <MX_GPIO_Init>
  MX_USART4_UART_Init ();
 8000228:	f000 f8e8 	bl	80003fc <MX_USART4_UART_Init>
  MX_SPI1_Init ();
 800022c:	f000 f86a 	bl	8000304 <MX_SPI1_Init>
  MX_SPI2_Init ();
 8000230:	f000 f8a6 	bl	8000380 <MX_SPI2_Init>
  while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
      HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x34>)
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	0018      	movs	r0, r3
 800023a:	f000 ff00 	bl	800103e <HAL_GPIO_TogglePin>
      HAL_Delay (1000);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fc22 	bl	8000a8c <HAL_Delay>
      HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_6);
 8000248:	e7f4      	b.n	8000234 <main+0x1c>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	50000800 	.word	0x50000800

08000250 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f002 fc31 	bl	8002ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f002 fc2a 	bl	8002ac8 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1);
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fefb 	bl	8001074 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2202      	movs	r2, #2
 8000282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2240      	movs	r2, #64	; 0x40
 8000298:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2202      	movs	r2, #2
 800029e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2208      	movs	r2, #8
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	0292      	lsls	r2, r2, #10
 80002b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0592      	lsls	r2, r2, #22
 80002c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 ff21 	bl	800110c <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
    {
      Error_Handler ();
 80002ce:	f000 f94d 	bl	800056c <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2207      	movs	r2, #7
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2202      	movs	r2, #2
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fa1c 	bl	800172c <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xac>
    {
      Error_Handler ();
 80002f8:	f000 f938 	bl	800056c <Error_Handler>
    }
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b013      	add	sp, #76	; 0x4c
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init (void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_SPI1_Init+0x74>)
 800030a:	4a1c      	ldr	r2, [pc, #112]	; (800037c <MX_SPI1_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_SPI1_Init+0x74>)
 8000310:	2282      	movs	r2, #130	; 0x82
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_SPI1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_SPI1_Init+0x74>)
 800031e:	22e0      	movs	r2, #224	; 0xe0
 8000320:	00d2      	lsls	r2, r2, #3
 8000322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_SPI1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_SPI1_Init+0x74>)
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_SPI1_Init+0x74>)
 800033a:	2220      	movs	r2, #32
 800033c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_SPI1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SPI1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_SPI1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SPI1_Init+0x74>)
 8000352:	2207      	movs	r2, #7
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_SPI1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SPI1_Init+0x74>)
 800035e:	2208      	movs	r2, #8
 8000360:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init (&hspi1) != HAL_OK)
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_SPI1_Init+0x74>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fb8b 	bl	8001a80 <HAL_SPI_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_SPI1_Init+0x6e>
    {
      Error_Handler ();
 800036e:	f000 f8fd 	bl	800056c <Error_Handler>
    }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000084 	.word	0x20000084
 800037c:	40013000 	.word	0x40013000

08000380 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init (void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_SPI2_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_SPI2_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_SPI2_Init+0x74>)
 800038c:	2282      	movs	r2, #130	; 0x82
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_SPI2_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_SPI2_Init+0x74>)
 800039a:	22e0      	movs	r2, #224	; 0xe0
 800039c:	00d2      	lsls	r2, r2, #3
 800039e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003ce:	2207      	movs	r2, #7
 80003d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init (&hspi2) != HAL_OK)
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <MX_SPI2_Init+0x74>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fb4d 	bl	8001a80 <HAL_SPI_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_SPI2_Init+0x6e>
    {
      Error_Handler ();
 80003ea:	f000 f8bf 	bl	800056c <Error_Handler>
    }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200000e8 	.word	0x200000e8
 80003f8:	40003800 	.word	0x40003800

080003fc <MX_USART4_UART_Init>:
 * @brief USART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART4_UART_Init (void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000402:	4a17      	ldr	r2, [pc, #92]	; (8000460 <MX_USART4_UART_Init+0x64>)
 8000404:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000408:	22e1      	movs	r2, #225	; 0xe1
 800040a:	0252      	lsls	r2, r2, #9
 800040c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART4_UART_Init+0x60>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART4_UART_Init+0x60>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART4_UART_Init+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000440:	2200      	movs	r2, #0
 8000442:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init (&huart4) != HAL_OK)
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_USART4_UART_Init+0x60>)
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fcda 	bl	8001e00 <HAL_UART_Init>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_USART4_UART_Init+0x58>
    {
      Error_Handler ();
 8000450:	f000 f88c 	bl	800056c <Error_Handler>
    }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	2000014c 	.word	0x2000014c
 8000460:	40004c00 	.word	0x40004c00

08000464 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b089      	sub	sp, #36	; 0x24
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800046a:	240c      	movs	r4, #12
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2314      	movs	r3, #20
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 fb27 	bl	8002ac8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b30      	ldr	r3, [pc, #192]	; (800053c <MX_GPIO_Init+0xd8>)
 800047c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047e:	4b2f      	ldr	r3, [pc, #188]	; (800053c <MX_GPIO_Init+0xd8>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
 8000486:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_GPIO_Init+0xd8>)
 8000488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b2a      	ldr	r3, [pc, #168]	; (800053c <MX_GPIO_Init+0xd8>)
 8000494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <MX_GPIO_Init+0xd8>)
 8000498:	2104      	movs	r1, #4
 800049a:	430a      	orrs	r2, r1
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <MX_GPIO_Init+0xd8>)
 80004a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a2:	2204      	movs	r2, #4
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_GPIO_Init+0xd8>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ae:	4b23      	ldr	r3, [pc, #140]	; (800053c <MX_GPIO_Init+0xd8>)
 80004b0:	2102      	movs	r1, #2
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <MX_GPIO_Init+0xd8>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	2202      	movs	r2, #2
 80004bc:	4013      	ands	r3, r2
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */

  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2200      	movs	r2, #0
 80004c8:	211c      	movs	r1, #28
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fd9a 	bl	8001004 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_GPIO_Init+0xdc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 fd94 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2240      	movs	r2, #64	; 0x40
 80004e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2201      	movs	r2, #1
 80004e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init (GPIOC, &GPIO_InitStruct);
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_GPIO_Init+0xdc>)
 80004f8:	0019      	movs	r1, r3
 80004fa:	0010      	movs	r0, r2
 80004fc:	f000 fc1e 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	221c      	movs	r2, #28
 8000504:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8000506:	193a      	adds	r2, r7, r4
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fc14 	bl	8000d3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2202      	movs	r2, #2
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8000526:	193a      	adds	r2, r7, r4
 8000528:	23a0      	movs	r3, #160	; 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fc04 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b009      	add	sp, #36	; 0x24
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	50000800 	.word	0x50000800

08000544 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit (&UartHandle, (uint8_t*) &ch, 1, 0xFFFF);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <__io_putchar+0x20>)
 800054e:	1d39      	adds	r1, r7, #4
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <__io_putchar+0x24>)
 8000552:	2201      	movs	r2, #1
 8000554:	f001 fcaa 	bl	8001eac <HAL_UART_Transmit>

  return ch;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	0000ffff 	.word	0x0000ffff
 8000568:	2000014c 	.word	0x2000014c

0800056c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  printf ("error.\r\n");
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <Error_Handler+0x14>)
 8000576:	0018      	movs	r0, r3
 8000578:	f002 f9aa 	bl	80028d0 <puts>
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x10>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	08003084 	.word	0x08003084

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_MspInit+0x4c>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_MspInit+0x4c>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_MspInit+0x4c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_MspInit+0x4c>)
 80005a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_MspInit+0x4c>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	430a      	orrs	r2, r1
 80005ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_MspInit+0x4c>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	055b      	lsls	r3, r3, #21
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_SYSCFG_StrobeDBattpinsConfig (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005be:	23c0      	movs	r3, #192	; 0xc0
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fa86 	bl	8000ad4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit (SPI_HandleTypeDef *hspi)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08d      	sub	sp, #52	; 0x34
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005dc:	241c      	movs	r4, #28
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f002 fa6e 	bl	8002ac8 <memset>
  if (hspi->Instance == SPI1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a42      	ldr	r2, [pc, #264]	; (80006fc <HAL_SPI_MspInit+0x128>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d131      	bne.n	800065a <HAL_SPI_MspInit+0x86>
    {
      /* USER CODE BEGIN SPI1_MspInit 0 */

      /* USER CODE END SPI1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_SPI1_CLK_ENABLE();
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 80005f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fa:	4b41      	ldr	r3, [pc, #260]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0149      	lsls	r1, r1, #5
 8000600:	430a      	orrs	r2, r1
 8000602:	641a      	str	r2, [r3, #64]	; 0x40
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	015b      	lsls	r3, r3, #5
 800060c:	4013      	ands	r3, r2
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	69bb      	ldr	r3, [r7, #24]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000616:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
      /**SPI1 GPIO Configuration
       PA5     ------> SPI1_SCK
       PA6     ------> SPI1_MISO
       PA7     ------> SPI1_MOSI
       */
      GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	22e0      	movs	r2, #224	; 0xe0
 8000630:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fb72 	bl	8000d3c <HAL_GPIO_Init>
      /* USER CODE BEGIN SPI2_MspInit 1 */

      /* USER CODE END SPI2_MspInit 1 */
    }

}
 8000658:	e04b      	b.n	80006f2 <HAL_SPI_MspInit+0x11e>
    } else if (hspi->Instance == SPI2)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a29      	ldr	r2, [pc, #164]	; (8000704 <HAL_SPI_MspInit+0x130>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d146      	bne.n	80006f2 <HAL_SPI_MspInit+0x11e>
      __HAL_RCC_SPI2_CLK_ENABLE();
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	01c9      	lsls	r1, r1, #7
 800066e:	430a      	orrs	r2, r1
 8000670:	63da      	str	r2, [r3, #60]	; 0x3c
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	01db      	lsls	r3, r3, #7
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 8000686:	2102      	movs	r1, #2
 8000688:	430a      	orrs	r2, r1
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <HAL_SPI_MspInit+0x12c>)
 800068e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000690:	2202      	movs	r2, #2
 8000692:	4013      	ands	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000698:	241c      	movs	r4, #28
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2202      	movs	r2, #2
 80006a4:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2204      	movs	r2, #4
 80006b6:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_SPI_MspInit+0x134>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f000 fb3c 	bl	8000d3c <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	22c0      	movs	r2, #192	; 0xc0
 80006ca:	0052      	lsls	r2, r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2202      	movs	r2, #2
 80006d2:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_SPI_MspInit+0x134>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f000 fb25 	bl	8000d3c <HAL_GPIO_Init>
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b00d      	add	sp, #52	; 0x34
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40013000 	.word	0x40013000
 8000700:	40021000 	.word	0x40021000
 8000704:	40003800 	.word	0x40003800
 8000708:	50000400 	.word	0x50000400

0800070c <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit (UART_HandleTypeDef *huart)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b08b      	sub	sp, #44	; 0x2c
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000714:	2414      	movs	r4, #20
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f002 f9d2 	bl	8002ac8 <memset>
  if (huart->Instance == USART4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_UART_MspInit+0x8c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d130      	bne.n	8000790 <HAL_UART_MspInit+0x84>
    {
      /* USER CODE BEGIN USART4_MspInit 0 */

      /* USER CODE END USART4_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_USART4_CLK_ENABLE();
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_UART_MspInit+0x90>)
 8000730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_UART_MspInit+0x90>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0309      	lsls	r1, r1, #12
 8000738:	430a      	orrs	r2, r1
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_UART_MspInit+0x90>)
 800073e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	031b      	lsls	r3, r3, #12
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_UART_MspInit+0x90>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_UART_MspInit+0x90>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_UART_MspInit+0x90>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
      /**USART4 GPIO Configuration
       PA0     ------> USART4_TX
       PA1     ------> USART4_RX
       */
      GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2203      	movs	r2, #3
 8000768:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2204      	movs	r2, #4
 8000780:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8000782:	187a      	adds	r2, r7, r1
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fad6 	bl	8000d3c <HAL_GPIO_Init>
      /* USER CODE BEGIN USART4_MspInit 1 */

      /* USER CODE END USART4_MspInit 1 */
    }

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b00b      	add	sp, #44	; 0x2c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40004c00 	.word	0x40004c00
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f946 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SPI1_IRQHandler>:
/* please refer to the startup file (startup_stm32g0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void SPI1_IRQHandler (void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler (&hspi1);
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <SPI1_IRQHandler+0x14>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fa0a 	bl	8001bf0 <HAL_SPI_IRQHandler>
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	20000084 	.word	0x20000084

080007e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fa:	e000      	b.n	80007fe <_read+0x16>
 80007fc:	bf00      	nop
 80007fe:	0001      	movs	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
  }

  return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b006      	add	sp, #24
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fe81 	bl	8000544 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
  }
  return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b006      	add	sp, #24
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000862:	2301      	movs	r3, #1
 8000864:	425b      	negs	r3, r3
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0192      	lsls	r2, r2, #6
 800087e:	605a      	str	r2, [r3, #4]
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}

0800089c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f002 f946 	bl	8002b74 <__errno>
 80008e8:	0003      	movs	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	425b      	negs	r3, r3
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	18d2      	adds	r2, r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	b006      	add	sp, #24
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20009000 	.word	0x20009000
 8000914:	00000400 	.word	0x00000400
 8000918:	200001e0 	.word	0x200001e0
 800091c:	20000338 	.word	0x20000338

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000930:	f7ff fff6 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095a:	f002 f911 	bl	8002b80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800095e:	f7ff fc5b 	bl	8000218 <main>

08000962 <LoopForever>:

LoopForever:
  b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000970:	0800310c 	.word	0x0800310c
  ldr r2, =_sbss
 8000974:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000978:	20000334 	.word	0x20000334

0800097c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_IRQHandler>
	...

08000980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_Init+0x3c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_Init+0x3c>)
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	0049      	lsls	r1, r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f810 	bl	80009c0 <HAL_InitTick>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d003      	beq.n	80009ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e001      	b.n	80009b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fdea 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	230f      	movs	r3, #15
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_InitTick+0x88>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d02b      	beq.n	8000a30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_InitTick+0x8c>)
 80009da:	681c      	ldr	r4, [r3, #0]
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_InitTick+0x88>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	0019      	movs	r1, r3
 80009e2:	23fa      	movs	r3, #250	; 0xfa
 80009e4:	0098      	lsls	r0, r3, #2
 80009e6:	f7ff fb8b 	bl	8000100 <__udivsi3>
 80009ea:	0003      	movs	r3, r0
 80009ec:	0019      	movs	r1, r3
 80009ee:	0020      	movs	r0, r4
 80009f0:	f7ff fb86 	bl	8000100 <__udivsi3>
 80009f4:	0003      	movs	r3, r0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f929 	bl	8000c4e <HAL_SYSTICK_Config>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d112      	bne.n	8000a26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d80a      	bhi.n	8000a1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f908 	bl	8000c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_InitTick+0x90>)
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	e00d      	b.n	8000a38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e008      	b.n	8000a38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a26:	230f      	movs	r3, #15
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e003      	b.n	8000a38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a38:	230f      	movs	r3, #15
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	781b      	ldrb	r3, [r3, #0]
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b005      	add	sp, #20
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	18d2      	adds	r2, r2, r3
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_IncTick+0x20>)
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200001e4 	.word	0x200001e4

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	200001e4 	.word	0x200001e4

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	001a      	movs	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	189b      	adds	r3, r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40010000 	.word	0x40010000
 8000afc:	fffff9ff 	.word	0xfffff9ff

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b7f      	cmp	r3, #127	; 0x7f
 8000b14:	d828      	bhi.n	8000b68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <__NVIC_SetPriority+0xd4>)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	33c0      	adds	r3, #192	; 0xc0
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	589b      	ldr	r3, [r3, r2]
 8000b26:	1dfa      	adds	r2, r7, #7
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	400a      	ands	r2, r1
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	21ff      	movs	r1, #255	; 0xff
 8000b34:	4091      	lsls	r1, r2
 8000b36:	000a      	movs	r2, r1
 8000b38:	43d2      	mvns	r2, r2
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	019b      	lsls	r3, r3, #6
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	401a      	ands	r2, r3
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	4003      	ands	r3, r0
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <__NVIC_SetPriority+0xd4>)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	33c0      	adds	r3, #192	; 0xc0
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b66:	e031      	b.n	8000bcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <__NVIC_SetPriority+0xd8>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0019      	movs	r1, r3
 8000b70:	230f      	movs	r3, #15
 8000b72:	400b      	ands	r3, r1
 8000b74:	3b08      	subs	r3, #8
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3306      	adds	r3, #6
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	3304      	adds	r3, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	0011      	movs	r1, r2
 8000b88:	2203      	movs	r2, #3
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <__NVIC_SetPriority+0xd8>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	001c      	movs	r4, r3
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4023      	ands	r3, r4
 8000bbc:	3b08      	subs	r3, #8
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	18c3      	adds	r3, r0, r3
 8000bc8:	3304      	adds	r3, #4
 8000bca:	601a      	str	r2, [r3, #0]
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b003      	add	sp, #12
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	045b      	lsls	r3, r3, #17
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d301      	bcc.n	8000bf4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e010      	b.n	8000c16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <SysTick_Config+0x44>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	2103      	movs	r1, #3
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff7c 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x44>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x44>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b002      	add	sp, #8
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	210f      	movs	r1, #15
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	1c02      	adds	r2, r0, #0
 8000c34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ffbf 	bl	8000bdc <SysTick_Config>
 8000c5e:	0003      	movs	r3, r0
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c70:	210f      	movs	r1, #15
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2225      	movs	r2, #37	; 0x25
 8000c7c:	5c9b      	ldrb	r3, [r3, r2]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d006      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2204      	movs	r2, #4
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e049      	b.n	8000d26 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	210e      	movs	r1, #14
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	438a      	bics	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	491d      	ldr	r1, [pc, #116]	; (8000d34 <HAL_DMA_Abort_IT+0xcc>)
 8000cbe:	400a      	ands	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_DMA_Abort_IT+0xd0>)
 8000cc4:	6859      	ldr	r1, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	221c      	movs	r2, #28
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_DMA_Abort_IT+0xd0>)
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ce0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00c      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cf4:	490f      	ldr	r1, [pc, #60]	; (8000d34 <HAL_DMA_Abort_IT+0xcc>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000d02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2225      	movs	r2, #37	; 0x25
 8000d08:	2101      	movs	r1, #1
 8000d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2224      	movs	r2, #36	; 0x24
 8000d10:	2100      	movs	r1, #0
 8000d12:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	0010      	movs	r0, r2
 8000d24:	4798      	blx	r3
    }
  }
  return status;
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	fffffeff 	.word	0xfffffeff
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e147      	b.n	8000fdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x28>
 8000d62:	e138      	b.n	8000fd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	58d3      	ldr	r3, [r2, r3]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2207      	movs	r2, #7
 8000e38:	4013      	ands	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2107      	movs	r1, #7
 8000e52:	400b      	ands	r3, r1
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	6939      	ldr	r1, [r7, #16]
 8000e6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	23c0      	movs	r3, #192	; 0xc0
 8000ea8:	029b      	lsls	r3, r3, #10
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <HAL_GPIO_Init+0x174>
 8000eae:	e092      	b.n	8000fd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	589b      	ldr	r3, [r3, r2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x1ca>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1c6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1c2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a43      	ldr	r2, [pc, #268]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1be>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x1cc>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x1cc>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x1cc>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x1cc>
 8000f06:	2300      	movs	r3, #0
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	00d2      	lsls	r2, r2, #3
 8000f10:	4093      	lsls	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f18:	4936      	ldr	r1, [pc, #216]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3318      	adds	r3, #24
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	035b      	lsls	r3, r3, #13
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	039b      	lsls	r3, r3, #14
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000f7c:	2384      	movs	r3, #132	; 0x84
 8000f7e:	58d3      	ldr	r3, [r2, r3]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	029b      	lsls	r3, r3, #10
 8000f94:	4013      	ands	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa0:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000fa2:	2284      	movs	r2, #132	; 0x84
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	58d3      	ldr	r3, [r2, r3]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fce:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	1e13      	subs	r3, r2, #0
 8000fe6:	d000      	beq.n	8000fea <HAL_GPIO_Init+0x2ae>
 8000fe8:	e6b0      	b.n	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b006      	add	sp, #24
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	50000400 	.word	0x50000400
 8000ffc:	50000800 	.word	0x50000800
 8001000:	50000c00 	.word	0x50000c00

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	0008      	movs	r0, r1
 800100e:	0011      	movs	r1, r2
 8001010:	1cbb      	adds	r3, r7, #2
 8001012:	1c02      	adds	r2, r0, #0
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	1c7b      	adds	r3, r7, #1
 8001018:	1c0a      	adds	r2, r1, #0
 800101a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	1c7b      	adds	r3, r7, #1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	000a      	movs	r2, r1
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001052:	1cbb      	adds	r3, r7, #2
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	041a      	lsls	r2, r3, #16
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	1cb9      	adds	r1, r7, #2
 8001062:	8809      	ldrh	r1, [r1, #0]
 8001064:	400b      	ands	r3, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	429a      	cmp	r2, r3
 8001096:	d11f      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	0013      	movs	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	189b      	adds	r3, r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff f82a 	bl	8000100 <__udivsi3>
 80010ac:	0003      	movs	r3, r0
 80010ae:	3301      	adds	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b2:	e008      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e001      	b.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e009      	b.n	80010da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	401a      	ands	r2, r3
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d0ed      	beq.n	80010b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40007000 	.word	0x40007000
 80010e8:	fffff9ff 	.word	0xfffff9ff
 80010ec:	20000000 	.word	0x20000000
 80010f0:	000f4240 	.word	0x000f4240

080010f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	23e0      	movs	r3, #224	; 0xe0
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	4013      	ands	r3, r2
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e2f3      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x1e>
 8001128:	e07c      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112a:	4bc3      	ldr	r3, [pc, #780]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2238      	movs	r2, #56	; 0x38
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001134:	4bc0      	ldr	r3, [pc, #768]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b10      	cmp	r3, #16
 8001142:	d102      	bne.n	800114a <HAL_RCC_OscConfig+0x3e>
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d002      	beq.n	8001150 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b08      	cmp	r3, #8
 800114e:	d10b      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	4bb9      	ldr	r3, [pc, #740]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	029b      	lsls	r3, r3, #10
 8001158:	4013      	ands	r3, r2
 800115a:	d062      	beq.n	8001222 <HAL_RCC_OscConfig+0x116>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d15e      	bne.n	8001222 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e2ce      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	429a      	cmp	r2, r3
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x78>
 8001174:	4bb0      	ldr	r3, [pc, #704]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4baf      	ldr	r3, [pc, #700]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0249      	lsls	r1, r1, #9
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e020      	b.n	80011c6 <HAL_RCC_OscConfig+0xba>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	23a0      	movs	r3, #160	; 0xa0
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	429a      	cmp	r2, r3
 800118e:	d10e      	bne.n	80011ae <HAL_RCC_OscConfig+0xa2>
 8001190:	4ba9      	ldr	r3, [pc, #676]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4ba8      	ldr	r3, [pc, #672]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	02c9      	lsls	r1, r1, #11
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	4ba6      	ldr	r3, [pc, #664]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4ba5      	ldr	r3, [pc, #660]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0249      	lsls	r1, r1, #9
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e00b      	b.n	80011c6 <HAL_RCC_OscConfig+0xba>
 80011ae:	4ba2      	ldr	r3, [pc, #648]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	49a1      	ldr	r1, [pc, #644]	; (800143c <HAL_RCC_OscConfig+0x330>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b9e      	ldr	r3, [pc, #632]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	499f      	ldr	r1, [pc, #636]	; (8001440 <HAL_RCC_OscConfig+0x334>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d014      	beq.n	80011f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ce:	f7ff fc53 	bl	8000a78 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc4e 	bl	8000a78 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e28d      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b93      	ldr	r3, [pc, #588]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xcc>
 80011f6:	e015      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc3e 	bl	8000a78 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001202:	f7ff fc39 	bl	8000a78 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e278      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0xf6>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001222:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d100      	bne.n	8001230 <HAL_RCC_OscConfig+0x124>
 800122e:	e099      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2238      	movs	r2, #56	; 0x38
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2203      	movs	r2, #3
 8001240:	4013      	ands	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d102      	bne.n	8001250 <HAL_RCC_OscConfig+0x144>
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d002      	beq.n	8001256 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d135      	bne.n	80012c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4013      	ands	r3, r2
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x162>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e24b      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a74      	ldr	r2, [pc, #464]	; (8001444 <HAL_RCC_OscConfig+0x338>)
 8001274:	4013      	ands	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	021a      	lsls	r2, r3, #8
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <HAL_RCC_OscConfig+0x33c>)
 8001290:	4013      	ands	r3, r2
 8001292:	0019      	movs	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0adb      	lsrs	r3, r3, #11
 80012a4:	2207      	movs	r2, #7
 80012a6:	4013      	ands	r3, r2
 80012a8:	4a68      	ldr	r2, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x340>)
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x344>)
 80012ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x348>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fb83 	bl	80009c0 <HAL_InitTick>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d051      	beq.n	8001362 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e221      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ca:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5e      	ldr	r2, [pc, #376]	; (8001448 <HAL_RCC_OscConfig+0x33c>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0049      	lsls	r1, r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fbc4 	bl	8000a78 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fbbf 	bl	8000a78 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1fe      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001308:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4013      	ands	r3, r2
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x338>)
 800131a:	4013      	ands	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	021a      	lsls	r2, r3, #8
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e01b      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800132c:	4b42      	ldr	r3, [pc, #264]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001332:	4949      	ldr	r1, [pc, #292]	; (8001458 <HAL_RCC_OscConfig+0x34c>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fb9e 	bl	8000a78 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fb99 	bl	8000a78 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1d8      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4013      	ands	r3, r2
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x236>
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001362:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	4013      	ands	r3, r2
 800136c:	d047      	beq.n	80013fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2238      	movs	r2, #56	; 0x38
 8001374:	4013      	ands	r3, r2
 8001376:	2b18      	cmp	r3, #24
 8001378:	d10a      	bne.n	8001390 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d03c      	beq.n	80013fe <HAL_RCC_OscConfig+0x2f2>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d138      	bne.n	80013fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e1ba      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d019      	beq.n	80013cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 800139e:	2101      	movs	r1, #1
 80013a0:	430a      	orrs	r2, r1
 80013a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb68 	bl	8000a78 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb63 	bl	8000a78 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a2      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d0f1      	beq.n	80013ae <HAL_RCC_OscConfig+0x2a2>
 80013ca:	e018      	b.n	80013fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	438a      	bics	r2, r1
 80013d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb4e 	bl	8000a78 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb49 	bl	8000a78 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e188      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f1      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2204      	movs	r2, #4
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x2fe>
 8001408:	e0c6      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	231f      	movs	r3, #31
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2238      	movs	r2, #56	; 0x38
 8001418:	4013      	ands	r3, r2
 800141a:	2b20      	cmp	r3, #32
 800141c:	d11e      	bne.n	800145c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x32c>)
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x31e>
 8001428:	e0b6      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d000      	beq.n	8001434 <HAL_RCC_OscConfig+0x328>
 8001432:	e0b1      	b.n	8001598 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e166      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
 8001438:	40021000 	.word	0x40021000
 800143c:	fffeffff 	.word	0xfffeffff
 8001440:	fffbffff 	.word	0xfffbffff
 8001444:	ffff80ff 	.word	0xffff80ff
 8001448:	ffffc7ff 	.word	0xffffc7ff
 800144c:	00f42400 	.word	0x00f42400
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004
 8001458:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800145c:	4bac      	ldr	r3, [pc, #688]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800145e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_RCC_OscConfig+0x360>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x362>
 800146c:	2300      	movs	r3, #0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d011      	beq.n	8001496 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001476:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0549      	lsls	r1, r1, #21
 800147c:	430a      	orrs	r2, r1
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001480:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	055b      	lsls	r3, r3, #21
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800148e:	231f      	movs	r3, #31
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	4b9f      	ldr	r3, [pc, #636]	; (8001714 <HAL_RCC_OscConfig+0x608>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	d11a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a2:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <HAL_RCC_OscConfig+0x608>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b9b      	ldr	r3, [pc, #620]	; (8001714 <HAL_RCC_OscConfig+0x608>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	0049      	lsls	r1, r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fae2 	bl	8000a78 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fadd 	bl	8000a78 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e11c      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014cc:	4b91      	ldr	r3, [pc, #580]	; (8001714 <HAL_RCC_OscConfig+0x608>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e2>
 80014e0:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80014e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b05      	cmp	r3, #5
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x404>
 80014f6:	4b86      	ldr	r3, [pc, #536]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80014f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	65da      	str	r2, [r3, #92]	; 0x5c
 8001502:	4b83      	ldr	r3, [pc, #524]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	65da      	str	r2, [r3, #92]	; 0x5c
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001516:	2101      	movs	r1, #1
 8001518:	438a      	bics	r2, r1
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800151e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001520:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001522:	2104      	movs	r1, #4
 8001524:	438a      	bics	r2, r1
 8001526:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d014      	beq.n	800155a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff faa2 	bl	8000a78 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001538:	e009      	b.n	800154e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fa9d 	bl	8000a78 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_RCC_OscConfig+0x60c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0db      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x42e>
 8001558:	e013      	b.n	8001582 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fa8d 	bl	8000a78 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001562:	e009      	b.n	8001578 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fa88 	bl	8000a78 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x60c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0c6      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001578:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001582:	231f      	movs	r3, #31
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b60      	ldr	r3, [pc, #384]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800158e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001592:	4962      	ldr	r1, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x610>)
 8001594:	400a      	ands	r2, r1
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <HAL_RCC_OscConfig+0x496>
 80015a0:	e0b0      	b.n	8001704 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2238      	movs	r2, #56	; 0x38
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d100      	bne.n	80015b0 <HAL_RCC_OscConfig+0x4a4>
 80015ae:	e078      	b.n	80016a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d153      	bne.n	8001660 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b55      	ldr	r3, [pc, #340]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80015be:	4958      	ldr	r1, [pc, #352]	; (8001720 <HAL_RCC_OscConfig+0x614>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fa58 	bl	8000a78 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa53 	bl	8000a78 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e092      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	049b      	lsls	r3, r3, #18
 80015e8:	4013      	ands	r3, r2
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_RCC_OscConfig+0x618>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	431a      	orrs	r2, r3
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0449      	lsls	r1, r1, #17
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	0549      	lsls	r1, r1, #21
 8001632:	430a      	orrs	r2, r1
 8001634:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fa1f 	bl	8000a78 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fa1a 	bl	8000a78 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e059      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	049b      	lsls	r3, r3, #18
 800165a:	4013      	ands	r3, r2
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x534>
 800165e:	e051      	b.n	8001704 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001666:	492e      	ldr	r1, [pc, #184]	; (8001720 <HAL_RCC_OscConfig+0x614>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fa04 	bl	8000a78 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff f9ff 	bl	8000a78 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e03e      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	049b      	lsls	r3, r3, #18
 8001690:	4013      	ands	r3, r2
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 800169a:	4923      	ldr	r1, [pc, #140]	; (8001728 <HAL_RCC_OscConfig+0x61c>)
 800169c:	400a      	ands	r2, r1
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	e030      	b.n	8001704 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e02b      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_RCC_OscConfig+0x604>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2203      	movs	r2, #3
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11e      	bne.n	8001700 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2270      	movs	r2, #112	; 0x70
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d117      	bne.n	8001700 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	23fe      	movs	r3, #254	; 0xfe
 80016d4:	01db      	lsls	r3, r3, #7
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	23f8      	movs	r3, #248	; 0xf8
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	0f5b      	lsrs	r3, r3, #29
 80016f6:	075a      	lsls	r2, r3, #29
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b008      	add	sp, #32
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000
 8001714:	40007000 	.word	0x40007000
 8001718:	00001388 	.word	0x00001388
 800171c:	efffffff 	.word	0xefffffff
 8001720:	feffffff 	.word	0xfeffffff
 8001724:	1fc1808c 	.word	0x1fc1808c
 8001728:	effefffc 	.word	0xeffefffc

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0e9      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2207      	movs	r2, #7
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d91e      	bls.n	800178c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2207      	movs	r2, #7
 8001754:	4393      	bics	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001760:	f7ff f98a 	bl	8000a78 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001768:	e009      	b.n	800177e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176a:	f7ff f985 	bl	8000a78 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_RCC_ClockConfig+0x1f4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0ca      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800177e:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2207      	movs	r2, #7
 8001784:	4013      	ands	r3, r2
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d015      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2204      	movs	r2, #4
 800179c:	4013      	ands	r3, r2
 800179e:	d006      	beq.n	80017ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017a0:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	21e0      	movs	r1, #224	; 0xe0
 80017a8:	01c9      	lsls	r1, r1, #7
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <HAL_RCC_ClockConfig+0x1fc>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	d057      	beq.n	800187c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	4013      	ands	r3, r2
 80017de:	d12b      	bne.n	8001838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e097      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	049b      	lsls	r3, r3, #18
 80017f4:	4013      	ands	r3, r2
 80017f6:	d11f      	bne.n	8001838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e08b      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4013      	ands	r3, r2
 800180e:	d113      	bne.n	8001838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e07f      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d106      	bne.n	800182a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 800181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d108      	bne.n	8001838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e074      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e06d      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2207      	movs	r2, #7
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800184c:	f7ff f914 	bl	8000a78 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001854:	e009      	b.n	800186a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7ff f90f 	bl	8000a78 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <HAL_RCC_ClockConfig+0x1f4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e054      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2238      	movs	r2, #56	; 0x38
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	429a      	cmp	r2, r3
 800187a:	d1ec      	bne.n	8001856 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2207      	movs	r2, #7
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d21e      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2207      	movs	r2, #7
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800189c:	f7ff f8ec 	bl	8000a78 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f8e7 	bl	8000a78 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_RCC_ClockConfig+0x1f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e02c      	b.n	8001914 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2207      	movs	r2, #7
 80018c0:	4013      	ands	r3, r2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2204      	movs	r2, #4
 80018ce:	4013      	ands	r3, r2
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_RCC_ClockConfig+0x200>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018e6:	f000 f829 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018ea:	0001      	movs	r1, r0
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	220f      	movs	r2, #15
 80018f4:	401a      	ands	r2, r3
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x204>)
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	58d3      	ldr	r3, [r2, r3]
 80018fc:	221f      	movs	r2, #31
 80018fe:	4013      	ands	r3, r2
 8001900:	000a      	movs	r2, r1
 8001902:	40da      	lsrs	r2, r3
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x208>)
 8001906:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x20c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff f857 	bl	80009c0 <HAL_InitTick>
 8001912:	0003      	movs	r3, r0
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b004      	add	sp, #16
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40022000 	.word	0x40022000
 8001920:	00001388 	.word	0x00001388
 8001924:	40021000 	.word	0x40021000
 8001928:	fffff0ff 	.word	0xfffff0ff
 800192c:	ffff8fff 	.word	0xffff8fff
 8001930:	0800308c 	.word	0x0800308c
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	d10f      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800194c:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0adb      	lsrs	r3, r3, #11
 8001952:	2207      	movs	r2, #7
 8001954:	4013      	ands	r3, r2
 8001956:	2201      	movs	r2, #1
 8001958:	409a      	lsls	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4835      	ldr	r0, [pc, #212]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001962:	f7fe fbcd 	bl	8000100 <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e05d      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2238      	movs	r2, #56	; 0x38
 8001972:	4013      	ands	r3, r2
 8001974:	2b08      	cmp	r3, #8
 8001976:	d102      	bne.n	800197e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x100>)
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e054      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2238      	movs	r2, #56	; 0x38
 8001984:	4013      	ands	r3, r2
 8001986:	2b10      	cmp	r3, #16
 8001988:	d138      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	2207      	movs	r2, #7
 800199c:	4013      	ands	r3, r2
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d10d      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	4824      	ldr	r0, [pc, #144]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x100>)
 80019ac:	f7fe fba8 	bl	8000100 <__udivsi3>
 80019b0:	0003      	movs	r3, r0
 80019b2:	0019      	movs	r1, r3
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	227f      	movs	r2, #127	; 0x7f
 80019bc:	4013      	ands	r3, r2
 80019be:	434b      	muls	r3, r1
 80019c0:	617b      	str	r3, [r7, #20]
        break;
 80019c2:	e00d      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019c8:	f7fe fb9a 	bl	8000100 <__udivsi3>
 80019cc:	0003      	movs	r3, r0
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	227f      	movs	r2, #127	; 0x7f
 80019d8:	4013      	ands	r3, r2
 80019da:	434b      	muls	r3, r1
 80019dc:	617b      	str	r3, [r7, #20]
        break;
 80019de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0f5b      	lsrs	r3, r3, #29
 80019e6:	2207      	movs	r2, #7
 80019e8:	4013      	ands	r3, r2
 80019ea:	3301      	adds	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	f7fe fb85 	bl	8000100 <__udivsi3>
 80019f6:	0003      	movs	r3, r0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e015      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d103      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2238      	movs	r2, #56	; 0x38
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b18      	cmp	r3, #24
 8001a1a:	d103      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a1c:	23fa      	movs	r3, #250	; 0xfa
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e001      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a28:	693b      	ldr	r3, [r7, #16]
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b006      	add	sp, #24
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a58:	f7ff fff2 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a5c:	0004      	movs	r4, r0
 8001a5e:	f7ff fb49 	bl	80010f4 <LL_RCC_GetAPB1Prescaler>
 8001a62:	0003      	movs	r3, r0
 8001a64:	0b1a      	lsrs	r2, r3, #12
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	58d3      	ldr	r3, [r2, r3]
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	4013      	ands	r3, r2
 8001a70:	40dc      	lsrs	r4, r3
 8001a72:	0023      	movs	r3, r4
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	080030cc 	.word	0x080030cc

08001a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0a8      	b.n	8001be4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	2382      	movs	r3, #130	; 0x82
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d009      	beq.n	8001aba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
 8001aac:	e005      	b.n	8001aba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	225d      	movs	r2, #93	; 0x5d
 8001ac4:	5c9b      	ldrb	r3, [r3, r2]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	225c      	movs	r2, #92	; 0x5c
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7fe fd7c 	bl	80005d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	225d      	movs	r2, #93	; 0x5d
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	23e0      	movs	r3, #224	; 0xe0
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d902      	bls.n	8001b06 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e002      	b.n	8001b0c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	23f0      	movs	r3, #240	; 0xf0
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d008      	beq.n	8001b2a <HAL_SPI_Init+0xaa>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	23e0      	movs	r3, #224	; 0xe0
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d002      	beq.n	8001b2a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	2382      	movs	r3, #130	; 0x82
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	2384      	movs	r3, #132	; 0x84
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2102      	movs	r1, #2
 8001b46:	400b      	ands	r3, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	400b      	ands	r3, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6999      	ldr	r1, [r3, #24]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	400b      	ands	r3, r1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2138      	movs	r1, #56	; 0x38
 8001b66:	400b      	ands	r3, r1
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	400b      	ands	r3, r1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	0011      	movs	r1, r2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	019b      	lsls	r3, r3, #6
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	2204      	movs	r2, #4
 8001b90:	401a      	ands	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2110      	movs	r1, #16
 8001b98:	400b      	ands	r3, r1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68d9      	ldr	r1, [r3, #12]
 8001baa:	23f0      	movs	r3, #240	; 0xf0
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	400b      	ands	r3, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4907      	ldr	r1, [pc, #28]	; (8001bec <HAL_SPI_Init+0x16c>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	225d      	movs	r2, #93	; 0x5d
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	fffff7ff 	.word	0xfffff7ff

08001bf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d10d      	bne.n	8001c2c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001c16:	d009      	beq.n	8001c2c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2240      	movs	r2, #64	; 0x40
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d005      	beq.n	8001c2c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	0010      	movs	r0, r2
 8001c28:	4798      	blx	r3
    return;
 8001c2a:	e0c5      	b.n	8001db8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d009      	beq.n	8001c48 <HAL_SPI_IRQHandler+0x58>
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d005      	beq.n	8001c48 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	0010      	movs	r0, r2
 8001c44:	4798      	blx	r3
    return;
 8001c46:	e0b7      	b.n	8001db8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d109      	bne.n	8001c64 <HAL_SPI_IRQHandler+0x74>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	4013      	ands	r3, r2
 8001c56:	d105      	bne.n	8001c64 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d100      	bne.n	8001c64 <HAL_SPI_IRQHandler+0x74>
 8001c62:	e0a9      	b.n	8001db8 <HAL_SPI_IRQHandler+0x1c8>
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2220      	movs	r2, #32
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_SPI_IRQHandler+0x7e>
 8001c6c:	e0a4      	b.n	8001db8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	4013      	ands	r3, r2
 8001c74:	d023      	beq.n	8001cbe <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	225d      	movs	r2, #93	; 0x5d
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d011      	beq.n	8001ca6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	2204      	movs	r2, #4
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	e00b      	b.n	8001cbe <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
        return;
 8001cbc:	e07c      	b.n	8001db8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d014      	beq.n	8001cf0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	2201      	movs	r2, #1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2140      	movs	r1, #64	; 0x40
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d00c      	beq.n	8001d14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfe:	2208      	movs	r2, #8
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d04c      	beq.n	8001db6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	21e0      	movs	r1, #224	; 0xe0
 8001d28:	438a      	bics	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	225d      	movs	r2, #93	; 0x5d
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d103      	bne.n	8001d44 <HAL_SPI_IRQHandler+0x154>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d032      	beq.n	8001daa <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2103      	movs	r1, #3
 8001d50:	438a      	bics	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <HAL_SPI_IRQHandler+0x1d0>)
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7fe ff7d 	bl	8000c68 <HAL_DMA_Abort_IT>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_SPI_IRQHandler+0x1d0>)
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7fe ff68 	bl	8000c68 <HAL_DMA_Abort_IT>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001da8:	e004      	b.n	8001db4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 f809 	bl	8001dc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001db2:	e000      	b.n	8001db6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001db4:	46c0      	nop			; (mov r8, r8)
    return;
 8001db6:	46c0      	nop			; (mov r8, r8)
  }
}
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b008      	add	sp, #32
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	08001dd5 	.word	0x08001dd5

08001dc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2246      	movs	r2, #70	; 0x46
 8001de6:	2100      	movs	r1, #0
 8001de8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ffe6 	bl	8001dc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e046      	b.n	8001ea0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2288      	movs	r2, #136	; 0x88
 8001e16:	589b      	ldr	r3, [r3, r2]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2284      	movs	r2, #132	; 0x84
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f7fe fc70 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2288      	movs	r2, #136	; 0x88
 8001e30:	2124      	movs	r1, #36	; 0x24
 8001e32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f8cc 	bl	8001fe4 <UART_SetConfig>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e024      	b.n	8001ea0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 fa63 	bl	800232c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <HAL_UART_Init+0xa8>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	212a      	movs	r1, #42	; 0x2a
 8001e82:	438a      	bics	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 fafb 	bl	8002494 <UART_CheckIdleState>
 8001e9e:	0003      	movs	r3, r0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	ffffb7ff 	.word	0xffffb7ff

08001eac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	1dbb      	adds	r3, r7, #6
 8001eba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2288      	movs	r2, #136	; 0x88
 8001ec0:	589b      	ldr	r3, [r3, r2]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d000      	beq.n	8001ec8 <HAL_UART_Transmit+0x1c>
 8001ec6:	e088      	b.n	8001fda <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_UART_Transmit+0x2a>
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e080      	b.n	8001fdc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	015b      	lsls	r3, r3, #5
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d109      	bne.n	8001efa <HAL_UART_Transmit+0x4e>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e070      	b.n	8001fdc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2290      	movs	r2, #144	; 0x90
 8001efe:	2100      	movs	r1, #0
 8001f00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2288      	movs	r2, #136	; 0x88
 8001f06:	2121      	movs	r1, #33	; 0x21
 8001f08:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe fdb5 	bl	8000a78 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1dba      	adds	r2, r7, #6
 8001f16:	2154      	movs	r1, #84	; 0x54
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1dba      	adds	r2, r7, #6
 8001f20:	2156      	movs	r1, #86	; 0x56
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	015b      	lsls	r3, r3, #5
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d108      	bne.n	8001f44 <HAL_UART_Transmit+0x98>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d104      	bne.n	8001f44 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	e003      	b.n	8001f4c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f4c:	e02c      	b.n	8001fa8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	0013      	movs	r3, r2
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	f000 fae8 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e039      	b.n	8001fdc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	001a      	movs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	05d2      	lsls	r2, r2, #23
 8001f7a:	0dd2      	lsrs	r2, r2, #23
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3302      	adds	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e007      	b.n	8001f96 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2256      	movs	r2, #86	; 0x56
 8001f9a:	5a9b      	ldrh	r3, [r3, r2]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2256      	movs	r2, #86	; 0x56
 8001fa6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2256      	movs	r2, #86	; 0x56
 8001fac:	5a9b      	ldrh	r3, [r3, r2]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1cc      	bne.n	8001f4e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	f000 fab5 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e006      	b.n	8001fdc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2288      	movs	r2, #136	; 0x88
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
  }
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b008      	add	sp, #32
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fec:	231a      	movs	r3, #26
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4313      	orrs	r3, r2
 800200a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4abc      	ldr	r2, [pc, #752]	; (8002304 <UART_SetConfig+0x320>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4ab7      	ldr	r2, [pc, #732]	; (8002308 <UART_SetConfig+0x324>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	4313      	orrs	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4aae      	ldr	r2, [pc, #696]	; (800230c <UART_SetConfig+0x328>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	220f      	movs	r2, #15
 8002068:	4393      	bics	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4aa4      	ldr	r2, [pc, #656]	; (8002310 <UART_SetConfig+0x32c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d127      	bne.n	80020d2 <UART_SetConfig+0xee>
 8002082:	4ba4      	ldr	r3, [pc, #656]	; (8002314 <UART_SetConfig+0x330>)
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	2203      	movs	r2, #3
 8002088:	4013      	ands	r3, r2
 800208a:	2b03      	cmp	r3, #3
 800208c:	d017      	beq.n	80020be <UART_SetConfig+0xda>
 800208e:	d81b      	bhi.n	80020c8 <UART_SetConfig+0xe4>
 8002090:	2b02      	cmp	r3, #2
 8002092:	d00a      	beq.n	80020aa <UART_SetConfig+0xc6>
 8002094:	d818      	bhi.n	80020c8 <UART_SetConfig+0xe4>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <UART_SetConfig+0xbc>
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00a      	beq.n	80020b4 <UART_SetConfig+0xd0>
 800209e:	e013      	b.n	80020c8 <UART_SetConfig+0xe4>
 80020a0:	231b      	movs	r3, #27
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e058      	b.n	800215c <UART_SetConfig+0x178>
 80020aa:	231b      	movs	r3, #27
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e053      	b.n	800215c <UART_SetConfig+0x178>
 80020b4:	231b      	movs	r3, #27
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e04e      	b.n	800215c <UART_SetConfig+0x178>
 80020be:	231b      	movs	r3, #27
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2208      	movs	r2, #8
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e049      	b.n	800215c <UART_SetConfig+0x178>
 80020c8:	231b      	movs	r3, #27
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2210      	movs	r2, #16
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e044      	b.n	800215c <UART_SetConfig+0x178>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a90      	ldr	r2, [pc, #576]	; (8002318 <UART_SetConfig+0x334>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d127      	bne.n	800212c <UART_SetConfig+0x148>
 80020dc:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <UART_SetConfig+0x330>)
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	220c      	movs	r2, #12
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d017      	beq.n	8002118 <UART_SetConfig+0x134>
 80020e8:	d81b      	bhi.n	8002122 <UART_SetConfig+0x13e>
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d00a      	beq.n	8002104 <UART_SetConfig+0x120>
 80020ee:	d818      	bhi.n	8002122 <UART_SetConfig+0x13e>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <UART_SetConfig+0x116>
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00a      	beq.n	800210e <UART_SetConfig+0x12a>
 80020f8:	e013      	b.n	8002122 <UART_SetConfig+0x13e>
 80020fa:	231b      	movs	r3, #27
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e02b      	b.n	800215c <UART_SetConfig+0x178>
 8002104:	231b      	movs	r3, #27
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e026      	b.n	800215c <UART_SetConfig+0x178>
 800210e:	231b      	movs	r3, #27
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2204      	movs	r2, #4
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e021      	b.n	800215c <UART_SetConfig+0x178>
 8002118:	231b      	movs	r3, #27
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2208      	movs	r2, #8
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e01c      	b.n	800215c <UART_SetConfig+0x178>
 8002122:	231b      	movs	r3, #27
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2210      	movs	r2, #16
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e017      	b.n	800215c <UART_SetConfig+0x178>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a7a      	ldr	r2, [pc, #488]	; (800231c <UART_SetConfig+0x338>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d104      	bne.n	8002140 <UART_SetConfig+0x15c>
 8002136:	231b      	movs	r3, #27
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e00d      	b.n	800215c <UART_SetConfig+0x178>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a76      	ldr	r2, [pc, #472]	; (8002320 <UART_SetConfig+0x33c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d104      	bne.n	8002154 <UART_SetConfig+0x170>
 800214a:	231b      	movs	r3, #27
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e003      	b.n	800215c <UART_SetConfig+0x178>
 8002154:	231b      	movs	r3, #27
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2210      	movs	r2, #16
 800215a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	429a      	cmp	r2, r3
 8002166:	d000      	beq.n	800216a <UART_SetConfig+0x186>
 8002168:	e065      	b.n	8002236 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800216a:	231b      	movs	r3, #27
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d015      	beq.n	80021a0 <UART_SetConfig+0x1bc>
 8002174:	dc18      	bgt.n	80021a8 <UART_SetConfig+0x1c4>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00d      	beq.n	8002196 <UART_SetConfig+0x1b2>
 800217a:	dc15      	bgt.n	80021a8 <UART_SetConfig+0x1c4>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <UART_SetConfig+0x1a2>
 8002180:	2b02      	cmp	r3, #2
 8002182:	d005      	beq.n	8002190 <UART_SetConfig+0x1ac>
 8002184:	e010      	b.n	80021a8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002186:	f7ff fc65 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 800218a:	0003      	movs	r3, r0
 800218c:	617b      	str	r3, [r7, #20]
        break;
 800218e:	e012      	b.n	80021b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002190:	4b64      	ldr	r3, [pc, #400]	; (8002324 <UART_SetConfig+0x340>)
 8002192:	617b      	str	r3, [r7, #20]
        break;
 8002194:	e00f      	b.n	80021b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002196:	f7ff fbd1 	bl	800193c <HAL_RCC_GetSysClockFreq>
 800219a:	0003      	movs	r3, r0
 800219c:	617b      	str	r3, [r7, #20]
        break;
 800219e:	e00a      	b.n	80021b6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	617b      	str	r3, [r7, #20]
        break;
 80021a6:	e006      	b.n	80021b6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80021ac:	231a      	movs	r3, #26
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
        break;
 80021b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d100      	bne.n	80021be <UART_SetConfig+0x1da>
 80021bc:	e08d      	b.n	80022da <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <UART_SetConfig+0x344>)
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	5ad3      	ldrh	r3, [r2, r3]
 80021c8:	0019      	movs	r1, r3
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7fd ff98 	bl	8000100 <__udivsi3>
 80021d0:	0003      	movs	r3, r0
 80021d2:	005a      	lsls	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	18d2      	adds	r2, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0019      	movs	r1, r3
 80021e2:	0010      	movs	r0, r2
 80021e4:	f7fd ff8c 	bl	8000100 <__udivsi3>
 80021e8:	0003      	movs	r3, r0
 80021ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	d91c      	bls.n	800222c <UART_SetConfig+0x248>
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	025b      	lsls	r3, r3, #9
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d217      	bcs.n	800222c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	200e      	movs	r0, #14
 8002202:	183b      	adds	r3, r7, r0
 8002204:	210f      	movs	r1, #15
 8002206:	438a      	bics	r2, r1
 8002208:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	b29b      	uxth	r3, r3
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	b299      	uxth	r1, r3
 8002216:	183b      	adds	r3, r7, r0
 8002218:	183a      	adds	r2, r7, r0
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	183a      	adds	r2, r7, r0
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	e056      	b.n	80022da <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800222c:	231a      	movs	r3, #26
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e051      	b.n	80022da <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002236:	231b      	movs	r3, #27
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d015      	beq.n	800226c <UART_SetConfig+0x288>
 8002240:	dc18      	bgt.n	8002274 <UART_SetConfig+0x290>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d00d      	beq.n	8002262 <UART_SetConfig+0x27e>
 8002246:	dc15      	bgt.n	8002274 <UART_SetConfig+0x290>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <UART_SetConfig+0x26e>
 800224c:	2b02      	cmp	r3, #2
 800224e:	d005      	beq.n	800225c <UART_SetConfig+0x278>
 8002250:	e010      	b.n	8002274 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002252:	f7ff fbff 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8002256:	0003      	movs	r3, r0
 8002258:	617b      	str	r3, [r7, #20]
        break;
 800225a:	e012      	b.n	8002282 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <UART_SetConfig+0x340>)
 800225e:	617b      	str	r3, [r7, #20]
        break;
 8002260:	e00f      	b.n	8002282 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002262:	f7ff fb6b 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8002266:	0003      	movs	r3, r0
 8002268:	617b      	str	r3, [r7, #20]
        break;
 800226a:	e00a      	b.n	8002282 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	617b      	str	r3, [r7, #20]
        break;
 8002272:	e006      	b.n	8002282 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002278:	231a      	movs	r3, #26
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
        break;
 8002280:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d028      	beq.n	80022da <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <UART_SetConfig+0x344>)
 800228e:	0052      	lsls	r2, r2, #1
 8002290:	5ad3      	ldrh	r3, [r2, r3]
 8002292:	0019      	movs	r1, r3
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f7fd ff33 	bl	8000100 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	001a      	movs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	085b      	lsrs	r3, r3, #1
 80022a4:	18d2      	adds	r2, r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0019      	movs	r1, r3
 80022ac:	0010      	movs	r0, r2
 80022ae:	f7fd ff27 	bl	8000100 <__udivsi3>
 80022b2:	0003      	movs	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d90a      	bls.n	80022d2 <UART_SetConfig+0x2ee>
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d205      	bcs.n	80022d2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	e003      	b.n	80022da <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80022d2:	231a      	movs	r3, #26
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	226a      	movs	r2, #106	; 0x6a
 80022de:	2101      	movs	r1, #1
 80022e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2268      	movs	r2, #104	; 0x68
 80022e6:	2101      	movs	r1, #1
 80022e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80022f6:	231a      	movs	r3, #26
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b008      	add	sp, #32
 8002302:	bd80      	pop	{r7, pc}
 8002304:	cfff69f3 	.word	0xcfff69f3
 8002308:	ffffcfff 	.word	0xffffcfff
 800230c:	11fff4ff 	.word	0x11fff4ff
 8002310:	40013800 	.word	0x40013800
 8002314:	40021000 	.word	0x40021000
 8002318:	40004400 	.word	0x40004400
 800231c:	40004800 	.word	0x40004800
 8002320:	40004c00 	.word	0x40004c00
 8002324:	00f42400 	.word	0x00f42400
 8002328:	080030ec 	.word	0x080030ec

0800232c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	d00b      	beq.n	8002356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <UART_AdvFeatureConfig+0x144>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d00b      	beq.n	8002378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a43      	ldr	r2, [pc, #268]	; (8002474 <UART_AdvFeatureConfig+0x148>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d00b      	beq.n	800239a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <UART_AdvFeatureConfig+0x14c>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	2208      	movs	r2, #8
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00b      	beq.n	80023bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <UART_AdvFeatureConfig+0x150>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	2210      	movs	r2, #16
 80023c2:	4013      	ands	r3, r2
 80023c4:	d00b      	beq.n	80023de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <UART_AdvFeatureConfig+0x154>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	2220      	movs	r2, #32
 80023e4:	4013      	ands	r3, r2
 80023e6:	d00b      	beq.n	8002400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <UART_AdvFeatureConfig+0x158>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	4013      	ands	r3, r2
 8002408:	d01d      	beq.n	8002446 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <UART_AdvFeatureConfig+0x15c>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	035b      	lsls	r3, r3, #13
 800242a:	429a      	cmp	r2, r3
 800242c:	d10b      	bne.n	8002446 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <UART_AdvFeatureConfig+0x160>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	4013      	ands	r3, r2
 800244e:	d00b      	beq.n	8002468 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <UART_AdvFeatureConfig+0x164>)
 8002458:	4013      	ands	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	605a      	str	r2, [r3, #4]
  }
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	fffdffff 	.word	0xfffdffff
 8002474:	fffeffff 	.word	0xfffeffff
 8002478:	fffbffff 	.word	0xfffbffff
 800247c:	ffff7fff 	.word	0xffff7fff
 8002480:	ffffefff 	.word	0xffffefff
 8002484:	ffffdfff 	.word	0xffffdfff
 8002488:	ffefffff 	.word	0xffefffff
 800248c:	ff9fffff 	.word	0xff9fffff
 8002490:	fff7ffff 	.word	0xfff7ffff

08002494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af02      	add	r7, sp, #8
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2290      	movs	r2, #144	; 0x90
 80024a0:	2100      	movs	r1, #0
 80024a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024a4:	f7fe fae8 	bl	8000a78 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2208      	movs	r2, #8
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d10c      	bne.n	80024d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	0391      	lsls	r1, r2, #14
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4a1a      	ldr	r2, [pc, #104]	; (800252c <UART_CheckIdleState+0x98>)
 80024c4:	9200      	str	r2, [sp, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f000 f832 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 80024cc:	1e03      	subs	r3, r0, #0
 80024ce:	d001      	beq.n	80024d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e026      	b.n	8002522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2204      	movs	r2, #4
 80024dc:	4013      	ands	r3, r2
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d10c      	bne.n	80024fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	03d1      	lsls	r1, r2, #15
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <UART_CheckIdleState+0x98>)
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f000 f81e 	bl	8002530 <UART_WaitOnFlagUntilTimeout>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d001      	beq.n	80024fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e012      	b.n	8002522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2288      	movs	r2, #136	; 0x88
 8002500:	2120      	movs	r1, #32
 8002502:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	228c      	movs	r2, #140	; 0x8c
 8002508:	2120      	movs	r1, #32
 800250a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2284      	movs	r2, #132	; 0x84
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	01ffffff 	.word	0x01ffffff

08002530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	; 0x50
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002540:	e0a7      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002544:	3301      	adds	r3, #1
 8002546:	d100      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002548:	e0a3      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe fa95 	bl	8000a78 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <UART_WaitOnFlagUntilTimeout+0x30>
 800255a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13f      	bne.n	80025e0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002560:	f3ef 8310 	mrs	r3, PRIMASK
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
 800256a:	2301      	movs	r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	f383 8810 	msr	PRIMASK, r3
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	494e      	ldr	r1, [pc, #312]	; (80026bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002582:	400a      	ands	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	f383 8810 	msr	PRIMASK, r3
}
 8002590:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002592:	f3ef 8310 	mrs	r3, PRIMASK
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
 800259c:	2301      	movs	r3, #1
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	f383 8810 	msr	PRIMASK, r3
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	438a      	bics	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025be:	f383 8810 	msr	PRIMASK, r3
}
 80025c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2288      	movs	r2, #136	; 0x88
 80025c8:	2120      	movs	r1, #32
 80025ca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	228c      	movs	r2, #140	; 0x8c
 80025d0:	2120      	movs	r1, #32
 80025d2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2284      	movs	r2, #132	; 0x84
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e069      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2204      	movs	r2, #4
 80025e8:	4013      	ands	r3, r2
 80025ea:	d052      	beq.n	8002692 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	401a      	ands	r2, r3
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d148      	bne.n	8002692 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260a:	f3ef 8310 	mrs	r3, PRIMASK
 800260e:	613b      	str	r3, [r7, #16]
  return(result);
 8002610:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002614:	2301      	movs	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f383 8810 	msr	PRIMASK, r3
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4924      	ldr	r1, [pc, #144]	; (80026bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f383 8810 	msr	PRIMASK, r3
}
 800263a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263c:	f3ef 8310 	mrs	r3, PRIMASK
 8002640:	61fb      	str	r3, [r7, #28]
  return(result);
 8002642:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002644:	64bb      	str	r3, [r7, #72]	; 0x48
 8002646:	2301      	movs	r3, #1
 8002648:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f383 8810 	msr	PRIMASK, r3
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	438a      	bics	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	f383 8810 	msr	PRIMASK, r3
}
 800266c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2288      	movs	r2, #136	; 0x88
 8002672:	2120      	movs	r1, #32
 8002674:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	228c      	movs	r2, #140	; 0x8c
 800267a:	2120      	movs	r1, #32
 800267c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2290      	movs	r2, #144	; 0x90
 8002682:	2120      	movs	r1, #32
 8002684:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2284      	movs	r2, #132	; 0x84
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e010      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	425a      	negs	r2, r3
 80026a2:	4153      	adcs	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	001a      	movs	r2, r3
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d100      	bne.n	80026b2 <UART_WaitOnFlagUntilTimeout+0x182>
 80026b0:	e747      	b.n	8002542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b014      	add	sp, #80	; 0x50
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	fffffe5f 	.word	0xfffffe5f

080026c0 <std>:
 80026c0:	2300      	movs	r3, #0
 80026c2:	b510      	push	{r4, lr}
 80026c4:	0004      	movs	r4, r0
 80026c6:	6003      	str	r3, [r0, #0]
 80026c8:	6043      	str	r3, [r0, #4]
 80026ca:	6083      	str	r3, [r0, #8]
 80026cc:	8181      	strh	r1, [r0, #12]
 80026ce:	6643      	str	r3, [r0, #100]	; 0x64
 80026d0:	0019      	movs	r1, r3
 80026d2:	81c2      	strh	r2, [r0, #14]
 80026d4:	6103      	str	r3, [r0, #16]
 80026d6:	6143      	str	r3, [r0, #20]
 80026d8:	6183      	str	r3, [r0, #24]
 80026da:	2208      	movs	r2, #8
 80026dc:	305c      	adds	r0, #92	; 0x5c
 80026de:	f000 f9f3 	bl	8002ac8 <memset>
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <std+0x38>)
 80026e4:	6224      	str	r4, [r4, #32]
 80026e6:	6263      	str	r3, [r4, #36]	; 0x24
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <std+0x3c>)
 80026ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <std+0x40>)
 80026ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <std+0x44>)
 80026f2:	6323      	str	r3, [r4, #48]	; 0x30
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	080028e5 	.word	0x080028e5
 80026fc:	0800290d 	.word	0x0800290d
 8002700:	08002945 	.word	0x08002945
 8002704:	08002971 	.word	0x08002971

08002708 <stdio_exit_handler>:
 8002708:	b510      	push	{r4, lr}
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <stdio_exit_handler+0x10>)
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <stdio_exit_handler+0x14>)
 800270e:	4804      	ldr	r0, [pc, #16]	; (8002720 <stdio_exit_handler+0x18>)
 8002710:	f000 f86c 	bl	80027ec <_fwalk_sglue>
 8002714:	bd10      	pop	{r4, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	2000000c 	.word	0x2000000c
 800271c:	08002edd 	.word	0x08002edd
 8002720:	20000018 	.word	0x20000018

08002724 <cleanup_stdio>:
 8002724:	6841      	ldr	r1, [r0, #4]
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <cleanup_stdio+0x30>)
 8002728:	b510      	push	{r4, lr}
 800272a:	0004      	movs	r4, r0
 800272c:	4299      	cmp	r1, r3
 800272e:	d001      	beq.n	8002734 <cleanup_stdio+0x10>
 8002730:	f000 fbd4 	bl	8002edc <_fflush_r>
 8002734:	68a1      	ldr	r1, [r4, #8]
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <cleanup_stdio+0x34>)
 8002738:	4299      	cmp	r1, r3
 800273a:	d002      	beq.n	8002742 <cleanup_stdio+0x1e>
 800273c:	0020      	movs	r0, r4
 800273e:	f000 fbcd 	bl	8002edc <_fflush_r>
 8002742:	68e1      	ldr	r1, [r4, #12]
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <cleanup_stdio+0x38>)
 8002746:	4299      	cmp	r1, r3
 8002748:	d002      	beq.n	8002750 <cleanup_stdio+0x2c>
 800274a:	0020      	movs	r0, r4
 800274c:	f000 fbc6 	bl	8002edc <_fflush_r>
 8002750:	bd10      	pop	{r4, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	200001e8 	.word	0x200001e8
 8002758:	20000250 	.word	0x20000250
 800275c:	200002b8 	.word	0x200002b8

08002760 <global_stdio_init.part.0>:
 8002760:	b510      	push	{r4, lr}
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <global_stdio_init.part.0+0x28>)
 8002764:	4a09      	ldr	r2, [pc, #36]	; (800278c <global_stdio_init.part.0+0x2c>)
 8002766:	2104      	movs	r1, #4
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	4809      	ldr	r0, [pc, #36]	; (8002790 <global_stdio_init.part.0+0x30>)
 800276c:	2200      	movs	r2, #0
 800276e:	f7ff ffa7 	bl	80026c0 <std>
 8002772:	2201      	movs	r2, #1
 8002774:	2109      	movs	r1, #9
 8002776:	4807      	ldr	r0, [pc, #28]	; (8002794 <global_stdio_init.part.0+0x34>)
 8002778:	f7ff ffa2 	bl	80026c0 <std>
 800277c:	2202      	movs	r2, #2
 800277e:	2112      	movs	r1, #18
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <global_stdio_init.part.0+0x38>)
 8002782:	f7ff ff9d 	bl	80026c0 <std>
 8002786:	bd10      	pop	{r4, pc}
 8002788:	20000320 	.word	0x20000320
 800278c:	08002709 	.word	0x08002709
 8002790:	200001e8 	.word	0x200001e8
 8002794:	20000250 	.word	0x20000250
 8002798:	200002b8 	.word	0x200002b8

0800279c <__sfp_lock_acquire>:
 800279c:	b510      	push	{r4, lr}
 800279e:	4802      	ldr	r0, [pc, #8]	; (80027a8 <__sfp_lock_acquire+0xc>)
 80027a0:	f000 fa12 	bl	8002bc8 <__retarget_lock_acquire_recursive>
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	20000329 	.word	0x20000329

080027ac <__sfp_lock_release>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	4802      	ldr	r0, [pc, #8]	; (80027b8 <__sfp_lock_release+0xc>)
 80027b0:	f000 fa0b 	bl	8002bca <__retarget_lock_release_recursive>
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000329 	.word	0x20000329

080027bc <__sinit>:
 80027bc:	b510      	push	{r4, lr}
 80027be:	0004      	movs	r4, r0
 80027c0:	f7ff ffec 	bl	800279c <__sfp_lock_acquire>
 80027c4:	6a23      	ldr	r3, [r4, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <__sinit+0x14>
 80027ca:	f7ff ffef 	bl	80027ac <__sfp_lock_release>
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__sinit+0x28>)
 80027d2:	6223      	str	r3, [r4, #32]
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <__sinit+0x2c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f6      	bne.n	80027ca <__sinit+0xe>
 80027dc:	f7ff ffc0 	bl	8002760 <global_stdio_init.part.0>
 80027e0:	e7f3      	b.n	80027ca <__sinit+0xe>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	08002725 	.word	0x08002725
 80027e8:	20000320 	.word	0x20000320

080027ec <_fwalk_sglue>:
 80027ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ee:	0014      	movs	r4, r2
 80027f0:	2600      	movs	r6, #0
 80027f2:	9000      	str	r0, [sp, #0]
 80027f4:	9101      	str	r1, [sp, #4]
 80027f6:	68a5      	ldr	r5, [r4, #8]
 80027f8:	6867      	ldr	r7, [r4, #4]
 80027fa:	3f01      	subs	r7, #1
 80027fc:	d504      	bpl.n	8002808 <_fwalk_sglue+0x1c>
 80027fe:	6824      	ldr	r4, [r4, #0]
 8002800:	2c00      	cmp	r4, #0
 8002802:	d1f8      	bne.n	80027f6 <_fwalk_sglue+0xa>
 8002804:	0030      	movs	r0, r6
 8002806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002808:	89ab      	ldrh	r3, [r5, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d908      	bls.n	8002820 <_fwalk_sglue+0x34>
 800280e:	220e      	movs	r2, #14
 8002810:	5eab      	ldrsh	r3, [r5, r2]
 8002812:	3301      	adds	r3, #1
 8002814:	d004      	beq.n	8002820 <_fwalk_sglue+0x34>
 8002816:	0029      	movs	r1, r5
 8002818:	9800      	ldr	r0, [sp, #0]
 800281a:	9b01      	ldr	r3, [sp, #4]
 800281c:	4798      	blx	r3
 800281e:	4306      	orrs	r6, r0
 8002820:	3568      	adds	r5, #104	; 0x68
 8002822:	e7ea      	b.n	80027fa <_fwalk_sglue+0xe>

08002824 <_puts_r>:
 8002824:	6a03      	ldr	r3, [r0, #32]
 8002826:	b570      	push	{r4, r5, r6, lr}
 8002828:	0005      	movs	r5, r0
 800282a:	000e      	movs	r6, r1
 800282c:	6884      	ldr	r4, [r0, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <_puts_r+0x12>
 8002832:	f7ff ffc3 	bl	80027bc <__sinit>
 8002836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002838:	07db      	lsls	r3, r3, #31
 800283a:	d405      	bmi.n	8002848 <_puts_r+0x24>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	059b      	lsls	r3, r3, #22
 8002840:	d402      	bmi.n	8002848 <_puts_r+0x24>
 8002842:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002844:	f000 f9c0 	bl	8002bc8 <__retarget_lock_acquire_recursive>
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	071b      	lsls	r3, r3, #28
 800284c:	d502      	bpl.n	8002854 <_puts_r+0x30>
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11f      	bne.n	8002894 <_puts_r+0x70>
 8002854:	0021      	movs	r1, r4
 8002856:	0028      	movs	r0, r5
 8002858:	f000 f8d2 	bl	8002a00 <__swsetup_r>
 800285c:	2800      	cmp	r0, #0
 800285e:	d019      	beq.n	8002894 <_puts_r+0x70>
 8002860:	2501      	movs	r5, #1
 8002862:	426d      	negs	r5, r5
 8002864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002866:	07db      	lsls	r3, r3, #31
 8002868:	d405      	bmi.n	8002876 <_puts_r+0x52>
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	059b      	lsls	r3, r3, #22
 800286e:	d402      	bmi.n	8002876 <_puts_r+0x52>
 8002870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002872:	f000 f9aa 	bl	8002bca <__retarget_lock_release_recursive>
 8002876:	0028      	movs	r0, r5
 8002878:	bd70      	pop	{r4, r5, r6, pc}
 800287a:	3601      	adds	r6, #1
 800287c:	60a3      	str	r3, [r4, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	da04      	bge.n	800288c <_puts_r+0x68>
 8002882:	69a2      	ldr	r2, [r4, #24]
 8002884:	429a      	cmp	r2, r3
 8002886:	dc16      	bgt.n	80028b6 <_puts_r+0x92>
 8002888:	290a      	cmp	r1, #10
 800288a:	d014      	beq.n	80028b6 <_puts_r+0x92>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	6022      	str	r2, [r4, #0]
 8002892:	7019      	strb	r1, [r3, #0]
 8002894:	68a3      	ldr	r3, [r4, #8]
 8002896:	7831      	ldrb	r1, [r6, #0]
 8002898:	3b01      	subs	r3, #1
 800289a:	2900      	cmp	r1, #0
 800289c:	d1ed      	bne.n	800287a <_puts_r+0x56>
 800289e:	60a3      	str	r3, [r4, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da0f      	bge.n	80028c4 <_puts_r+0xa0>
 80028a4:	0028      	movs	r0, r5
 80028a6:	0022      	movs	r2, r4
 80028a8:	310a      	adds	r1, #10
 80028aa:	f000 f867 	bl	800297c <__swbuf_r>
 80028ae:	250a      	movs	r5, #10
 80028b0:	3001      	adds	r0, #1
 80028b2:	d1d7      	bne.n	8002864 <_puts_r+0x40>
 80028b4:	e7d4      	b.n	8002860 <_puts_r+0x3c>
 80028b6:	0022      	movs	r2, r4
 80028b8:	0028      	movs	r0, r5
 80028ba:	f000 f85f 	bl	800297c <__swbuf_r>
 80028be:	3001      	adds	r0, #1
 80028c0:	d1e8      	bne.n	8002894 <_puts_r+0x70>
 80028c2:	e7cd      	b.n	8002860 <_puts_r+0x3c>
 80028c4:	250a      	movs	r5, #10
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	6022      	str	r2, [r4, #0]
 80028cc:	701d      	strb	r5, [r3, #0]
 80028ce:	e7c9      	b.n	8002864 <_puts_r+0x40>

080028d0 <puts>:
 80028d0:	b510      	push	{r4, lr}
 80028d2:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <puts+0x10>)
 80028d4:	0001      	movs	r1, r0
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f7ff ffa4 	bl	8002824 <_puts_r>
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	20000064 	.word	0x20000064

080028e4 <__sread>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	000c      	movs	r4, r1
 80028e8:	250e      	movs	r5, #14
 80028ea:	5f49      	ldrsh	r1, [r1, r5]
 80028ec:	f000 f91a 	bl	8002b24 <_read_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	db03      	blt.n	80028fc <__sread+0x18>
 80028f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028f6:	181b      	adds	r3, r3, r0
 80028f8:	6563      	str	r3, [r4, #84]	; 0x54
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	4a02      	ldr	r2, [pc, #8]	; (8002908 <__sread+0x24>)
 8002900:	4013      	ands	r3, r2
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	e7f9      	b.n	80028fa <__sread+0x16>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	ffffefff 	.word	0xffffefff

0800290c <__swrite>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	001f      	movs	r7, r3
 8002910:	898b      	ldrh	r3, [r1, #12]
 8002912:	0005      	movs	r5, r0
 8002914:	000c      	movs	r4, r1
 8002916:	0016      	movs	r6, r2
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	d505      	bpl.n	8002928 <__swrite+0x1c>
 800291c:	230e      	movs	r3, #14
 800291e:	5ec9      	ldrsh	r1, [r1, r3]
 8002920:	2200      	movs	r2, #0
 8002922:	2302      	movs	r3, #2
 8002924:	f000 f8ea 	bl	8002afc <_lseek_r>
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <__swrite+0x34>)
 800292c:	0028      	movs	r0, r5
 800292e:	4013      	ands	r3, r2
 8002930:	81a3      	strh	r3, [r4, #12]
 8002932:	0032      	movs	r2, r6
 8002934:	230e      	movs	r3, #14
 8002936:	5ee1      	ldrsh	r1, [r4, r3]
 8002938:	003b      	movs	r3, r7
 800293a:	f000 f907 	bl	8002b4c <_write_r>
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002940:	ffffefff 	.word	0xffffefff

08002944 <__sseek>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	000c      	movs	r4, r1
 8002948:	250e      	movs	r5, #14
 800294a:	5f49      	ldrsh	r1, [r1, r5]
 800294c:	f000 f8d6 	bl	8002afc <_lseek_r>
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	1c42      	adds	r2, r0, #1
 8002954:	d103      	bne.n	800295e <__sseek+0x1a>
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <__sseek+0x28>)
 8002958:	4013      	ands	r3, r2
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	0152      	lsls	r2, r2, #5
 8002962:	4313      	orrs	r3, r2
 8002964:	81a3      	strh	r3, [r4, #12]
 8002966:	6560      	str	r0, [r4, #84]	; 0x54
 8002968:	e7f8      	b.n	800295c <__sseek+0x18>
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	ffffefff 	.word	0xffffefff

08002970 <__sclose>:
 8002970:	b510      	push	{r4, lr}
 8002972:	230e      	movs	r3, #14
 8002974:	5ec9      	ldrsh	r1, [r1, r3]
 8002976:	f000 f8af 	bl	8002ad8 <_close_r>
 800297a:	bd10      	pop	{r4, pc}

0800297c <__swbuf_r>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	0006      	movs	r6, r0
 8002980:	000d      	movs	r5, r1
 8002982:	0014      	movs	r4, r2
 8002984:	2800      	cmp	r0, #0
 8002986:	d004      	beq.n	8002992 <__swbuf_r+0x16>
 8002988:	6a03      	ldr	r3, [r0, #32]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <__swbuf_r+0x16>
 800298e:	f7ff ff15 	bl	80027bc <__sinit>
 8002992:	69a3      	ldr	r3, [r4, #24]
 8002994:	60a3      	str	r3, [r4, #8]
 8002996:	89a3      	ldrh	r3, [r4, #12]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	d528      	bpl.n	80029ee <__swbuf_r+0x72>
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d025      	beq.n	80029ee <__swbuf_r+0x72>
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	b2ef      	uxtb	r7, r5
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	6963      	ldr	r3, [r4, #20]
 80029ac:	b2ed      	uxtb	r5, r5
 80029ae:	4283      	cmp	r3, r0
 80029b0:	dc05      	bgt.n	80029be <__swbuf_r+0x42>
 80029b2:	0021      	movs	r1, r4
 80029b4:	0030      	movs	r0, r6
 80029b6:	f000 fa91 	bl	8002edc <_fflush_r>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d11d      	bne.n	80029fa <__swbuf_r+0x7e>
 80029be:	68a3      	ldr	r3, [r4, #8]
 80029c0:	3001      	adds	r0, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60a3      	str	r3, [r4, #8]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	6022      	str	r2, [r4, #0]
 80029cc:	701f      	strb	r7, [r3, #0]
 80029ce:	6963      	ldr	r3, [r4, #20]
 80029d0:	4283      	cmp	r3, r0
 80029d2:	d004      	beq.n	80029de <__swbuf_r+0x62>
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	07db      	lsls	r3, r3, #31
 80029d8:	d507      	bpl.n	80029ea <__swbuf_r+0x6e>
 80029da:	2d0a      	cmp	r5, #10
 80029dc:	d105      	bne.n	80029ea <__swbuf_r+0x6e>
 80029de:	0021      	movs	r1, r4
 80029e0:	0030      	movs	r0, r6
 80029e2:	f000 fa7b 	bl	8002edc <_fflush_r>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d107      	bne.n	80029fa <__swbuf_r+0x7e>
 80029ea:	0028      	movs	r0, r5
 80029ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ee:	0021      	movs	r1, r4
 80029f0:	0030      	movs	r0, r6
 80029f2:	f000 f805 	bl	8002a00 <__swsetup_r>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d0d3      	beq.n	80029a2 <__swbuf_r+0x26>
 80029fa:	2501      	movs	r5, #1
 80029fc:	426d      	negs	r5, r5
 80029fe:	e7f4      	b.n	80029ea <__swbuf_r+0x6e>

08002a00 <__swsetup_r>:
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <__swsetup_r+0xc4>)
 8002a02:	b570      	push	{r4, r5, r6, lr}
 8002a04:	0005      	movs	r5, r0
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	000c      	movs	r4, r1
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d004      	beq.n	8002a18 <__swsetup_r+0x18>
 8002a0e:	6a03      	ldr	r3, [r0, #32]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <__swsetup_r+0x18>
 8002a14:	f7ff fed2 	bl	80027bc <__sinit>
 8002a18:	230c      	movs	r3, #12
 8002a1a:	5ee2      	ldrsh	r2, [r4, r3]
 8002a1c:	b293      	uxth	r3, r2
 8002a1e:	0711      	lsls	r1, r2, #28
 8002a20:	d423      	bmi.n	8002a6a <__swsetup_r+0x6a>
 8002a22:	06d9      	lsls	r1, r3, #27
 8002a24:	d407      	bmi.n	8002a36 <__swsetup_r+0x36>
 8002a26:	2309      	movs	r3, #9
 8002a28:	2001      	movs	r0, #1
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	3337      	adds	r3, #55	; 0x37
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	81a3      	strh	r3, [r4, #12]
 8002a32:	4240      	negs	r0, r0
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	075b      	lsls	r3, r3, #29
 8002a38:	d513      	bpl.n	8002a62 <__swsetup_r+0x62>
 8002a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a3c:	2900      	cmp	r1, #0
 8002a3e:	d008      	beq.n	8002a52 <__swsetup_r+0x52>
 8002a40:	0023      	movs	r3, r4
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	4299      	cmp	r1, r3
 8002a46:	d002      	beq.n	8002a4e <__swsetup_r+0x4e>
 8002a48:	0028      	movs	r0, r5
 8002a4a:	f000 f8bf 	bl	8002bcc <_free_r>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6363      	str	r3, [r4, #52]	; 0x34
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	4393      	bics	r3, r2
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6063      	str	r3, [r4, #4]
 8002a5e:	6923      	ldr	r3, [r4, #16]
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	2308      	movs	r3, #8
 8002a64:	89a2      	ldrh	r2, [r4, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	81a3      	strh	r3, [r4, #12]
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <__swsetup_r+0x88>
 8002a70:	21a0      	movs	r1, #160	; 0xa0
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	89a3      	ldrh	r3, [r4, #12]
 8002a76:	0089      	lsls	r1, r1, #2
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <__swsetup_r+0x88>
 8002a80:	0021      	movs	r1, r4
 8002a82:	0028      	movs	r0, r5
 8002a84:	f000 fa7e 	bl	8002f84 <__smakebuf_r>
 8002a88:	220c      	movs	r2, #12
 8002a8a:	5ea3      	ldrsh	r3, [r4, r2]
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	001a      	movs	r2, r3
 8002a90:	b299      	uxth	r1, r3
 8002a92:	4002      	ands	r2, r0
 8002a94:	4203      	tst	r3, r0
 8002a96:	d00f      	beq.n	8002ab8 <__swsetup_r+0xb8>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60a2      	str	r2, [r4, #8]
 8002a9c:	6962      	ldr	r2, [r4, #20]
 8002a9e:	4252      	negs	r2, r2
 8002aa0:	61a2      	str	r2, [r4, #24]
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	6922      	ldr	r2, [r4, #16]
 8002aa6:	4282      	cmp	r2, r0
 8002aa8:	d1c4      	bne.n	8002a34 <__swsetup_r+0x34>
 8002aaa:	0609      	lsls	r1, r1, #24
 8002aac:	d5c2      	bpl.n	8002a34 <__swsetup_r+0x34>
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	81a3      	strh	r3, [r4, #12]
 8002ab4:	3801      	subs	r0, #1
 8002ab6:	e7bd      	b.n	8002a34 <__swsetup_r+0x34>
 8002ab8:	0788      	lsls	r0, r1, #30
 8002aba:	d400      	bmi.n	8002abe <__swsetup_r+0xbe>
 8002abc:	6962      	ldr	r2, [r4, #20]
 8002abe:	60a2      	str	r2, [r4, #8]
 8002ac0:	e7ef      	b.n	8002aa2 <__swsetup_r+0xa2>
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	20000064 	.word	0x20000064

08002ac8 <memset>:
 8002ac8:	0003      	movs	r3, r0
 8002aca:	1882      	adds	r2, r0, r2
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <memset+0xa>
 8002ad0:	4770      	bx	lr
 8002ad2:	7019      	strb	r1, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	e7f9      	b.n	8002acc <memset+0x4>

08002ad8 <_close_r>:
 8002ad8:	2300      	movs	r3, #0
 8002ada:	b570      	push	{r4, r5, r6, lr}
 8002adc:	4d06      	ldr	r5, [pc, #24]	; (8002af8 <_close_r+0x20>)
 8002ade:	0004      	movs	r4, r0
 8002ae0:	0008      	movs	r0, r1
 8002ae2:	602b      	str	r3, [r5, #0]
 8002ae4:	f7fd feb9 	bl	800085a <_close>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d103      	bne.n	8002af4 <_close_r+0x1c>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d000      	beq.n	8002af4 <_close_r+0x1c>
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	20000324 	.word	0x20000324

08002afc <_lseek_r>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	0004      	movs	r4, r0
 8002b00:	0008      	movs	r0, r1
 8002b02:	0011      	movs	r1, r2
 8002b04:	001a      	movs	r2, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	4d05      	ldr	r5, [pc, #20]	; (8002b20 <_lseek_r+0x24>)
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	f7fd fec6 	bl	800089c <_lseek>
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	d103      	bne.n	8002b1c <_lseek_r+0x20>
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <_lseek_r+0x20>
 8002b1a:	6023      	str	r3, [r4, #0]
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000324 	.word	0x20000324

08002b24 <_read_r>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	0004      	movs	r4, r0
 8002b28:	0008      	movs	r0, r1
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	2300      	movs	r3, #0
 8002b30:	4d05      	ldr	r5, [pc, #20]	; (8002b48 <_read_r+0x24>)
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	f7fd fe58 	bl	80007e8 <_read>
 8002b38:	1c43      	adds	r3, r0, #1
 8002b3a:	d103      	bne.n	8002b44 <_read_r+0x20>
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d000      	beq.n	8002b44 <_read_r+0x20>
 8002b42:	6023      	str	r3, [r4, #0]
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	20000324 	.word	0x20000324

08002b4c <_write_r>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	0004      	movs	r4, r0
 8002b50:	0008      	movs	r0, r1
 8002b52:	0011      	movs	r1, r2
 8002b54:	001a      	movs	r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	4d05      	ldr	r5, [pc, #20]	; (8002b70 <_write_r+0x24>)
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fe61 	bl	8000822 <_write>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d103      	bne.n	8002b6c <_write_r+0x20>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d000      	beq.n	8002b6c <_write_r+0x20>
 8002b6a:	6023      	str	r3, [r4, #0]
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000324 	.word	0x20000324

08002b74 <__errno>:
 8002b74:	4b01      	ldr	r3, [pc, #4]	; (8002b7c <__errno+0x8>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	4770      	bx	lr
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	20000064 	.word	0x20000064

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	2600      	movs	r6, #0
 8002b84:	4c0c      	ldr	r4, [pc, #48]	; (8002bb8 <__libc_init_array+0x38>)
 8002b86:	4d0d      	ldr	r5, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	2600      	movs	r6, #0
 8002b92:	f000 fa6b 	bl	800306c <_init>
 8002b96:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x40>)
 8002b98:	4d0a      	ldr	r5, [pc, #40]	; (8002bc4 <__libc_init_array+0x44>)
 8002b9a:	1b64      	subs	r4, r4, r5
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	00b3      	lsls	r3, r6, #2
 8002ba6:	58eb      	ldr	r3, [r5, r3]
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	00b3      	lsls	r3, r6, #2
 8002bb0:	58eb      	ldr	r3, [r5, r3]
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08003104 	.word	0x08003104
 8002bbc:	08003104 	.word	0x08003104
 8002bc0:	08003108 	.word	0x08003108
 8002bc4:	08003104 	.word	0x08003104

08002bc8 <__retarget_lock_acquire_recursive>:
 8002bc8:	4770      	bx	lr

08002bca <__retarget_lock_release_recursive>:
 8002bca:	4770      	bx	lr

08002bcc <_free_r>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	0005      	movs	r5, r0
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d010      	beq.n	8002bf6 <_free_r+0x2a>
 8002bd4:	1f0c      	subs	r4, r1, #4
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <_free_r+0x12>
 8002bdc:	18e4      	adds	r4, r4, r3
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 f8e2 	bl	8002da8 <__malloc_lock>
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <_free_r+0x90>)
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <_free_r+0x2c>
 8002bec:	6063      	str	r3, [r4, #4]
 8002bee:	6014      	str	r4, [r2, #0]
 8002bf0:	0028      	movs	r0, r5
 8002bf2:	f000 f8e1 	bl	8002db8 <__malloc_unlock>
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	d908      	bls.n	8002c0e <_free_r+0x42>
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	1821      	adds	r1, r4, r0
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d1f3      	bne.n	8002bec <_free_r+0x20>
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	1809      	adds	r1, r1, r0
 8002c0a:	6021      	str	r1, [r4, #0]
 8002c0c:	e7ee      	b.n	8002bec <_free_r+0x20>
 8002c0e:	001a      	movs	r2, r3
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <_free_r+0x4e>
 8002c16:	42a3      	cmp	r3, r4
 8002c18:	d9f9      	bls.n	8002c0e <_free_r+0x42>
 8002c1a:	6811      	ldr	r1, [r2, #0]
 8002c1c:	1850      	adds	r0, r2, r1
 8002c1e:	42a0      	cmp	r0, r4
 8002c20:	d10b      	bne.n	8002c3a <_free_r+0x6e>
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	1809      	adds	r1, r1, r0
 8002c26:	1850      	adds	r0, r2, r1
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	4283      	cmp	r3, r0
 8002c2c:	d1e0      	bne.n	8002bf0 <_free_r+0x24>
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	1841      	adds	r1, r0, r1
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	6053      	str	r3, [r2, #4]
 8002c38:	e7da      	b.n	8002bf0 <_free_r+0x24>
 8002c3a:	42a0      	cmp	r0, r4
 8002c3c:	d902      	bls.n	8002c44 <_free_r+0x78>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	e7d5      	b.n	8002bf0 <_free_r+0x24>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	d103      	bne.n	8002c54 <_free_r+0x88>
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	1809      	adds	r1, r1, r0
 8002c52:	6021      	str	r1, [r4, #0]
 8002c54:	6063      	str	r3, [r4, #4]
 8002c56:	6054      	str	r4, [r2, #4]
 8002c58:	e7ca      	b.n	8002bf0 <_free_r+0x24>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	2000032c 	.word	0x2000032c

08002c60 <sbrk_aligned>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4e0f      	ldr	r6, [pc, #60]	; (8002ca0 <sbrk_aligned+0x40>)
 8002c64:	000d      	movs	r5, r1
 8002c66:	6831      	ldr	r1, [r6, #0]
 8002c68:	0004      	movs	r4, r0
 8002c6a:	2900      	cmp	r1, #0
 8002c6c:	d102      	bne.n	8002c74 <sbrk_aligned+0x14>
 8002c6e:	f000 f9eb 	bl	8003048 <_sbrk_r>
 8002c72:	6030      	str	r0, [r6, #0]
 8002c74:	0029      	movs	r1, r5
 8002c76:	0020      	movs	r0, r4
 8002c78:	f000 f9e6 	bl	8003048 <_sbrk_r>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d00a      	beq.n	8002c96 <sbrk_aligned+0x36>
 8002c80:	2303      	movs	r3, #3
 8002c82:	1cc5      	adds	r5, r0, #3
 8002c84:	439d      	bics	r5, r3
 8002c86:	42a8      	cmp	r0, r5
 8002c88:	d007      	beq.n	8002c9a <sbrk_aligned+0x3a>
 8002c8a:	1a29      	subs	r1, r5, r0
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	f000 f9db 	bl	8003048 <_sbrk_r>
 8002c92:	3001      	adds	r0, #1
 8002c94:	d101      	bne.n	8002c9a <sbrk_aligned+0x3a>
 8002c96:	2501      	movs	r5, #1
 8002c98:	426d      	negs	r5, r5
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000330 	.word	0x20000330

08002ca4 <_malloc_r>:
 8002ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	1ccb      	adds	r3, r1, #3
 8002caa:	4393      	bics	r3, r2
 8002cac:	3308      	adds	r3, #8
 8002cae:	0006      	movs	r6, r0
 8002cb0:	001f      	movs	r7, r3
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d238      	bcs.n	8002d28 <_malloc_r+0x84>
 8002cb6:	270c      	movs	r7, #12
 8002cb8:	42b9      	cmp	r1, r7
 8002cba:	d837      	bhi.n	8002d2c <_malloc_r+0x88>
 8002cbc:	0030      	movs	r0, r6
 8002cbe:	f000 f873 	bl	8002da8 <__malloc_lock>
 8002cc2:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <_malloc_r+0x100>)
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	001c      	movs	r4, r3
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d133      	bne.n	8002d36 <_malloc_r+0x92>
 8002cce:	0039      	movs	r1, r7
 8002cd0:	0030      	movs	r0, r6
 8002cd2:	f7ff ffc5 	bl	8002c60 <sbrk_aligned>
 8002cd6:	0004      	movs	r4, r0
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d15e      	bne.n	8002d9a <_malloc_r+0xf6>
 8002cdc:	9b00      	ldr	r3, [sp, #0]
 8002cde:	681c      	ldr	r4, [r3, #0]
 8002ce0:	0025      	movs	r5, r4
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	d14e      	bne.n	8002d84 <_malloc_r+0xe0>
 8002ce6:	2c00      	cmp	r4, #0
 8002ce8:	d051      	beq.n	8002d8e <_malloc_r+0xea>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	0029      	movs	r1, r5
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	0030      	movs	r0, r6
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	f000 f9a8 	bl	8003048 <_sbrk_r>
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	4283      	cmp	r3, r0
 8002cfc:	d147      	bne.n	8002d8e <_malloc_r+0xea>
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	0030      	movs	r0, r6
 8002d02:	1aff      	subs	r7, r7, r3
 8002d04:	0039      	movs	r1, r7
 8002d06:	f7ff ffab 	bl	8002c60 <sbrk_aligned>
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	d03f      	beq.n	8002d8e <_malloc_r+0xea>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	9b00      	ldr	r3, [sp, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d040      	beq.n	8002d9e <_malloc_r+0xfa>
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	42a2      	cmp	r2, r4
 8002d20:	d133      	bne.n	8002d8a <_malloc_r+0xe6>
 8002d22:	2200      	movs	r2, #0
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e014      	b.n	8002d52 <_malloc_r+0xae>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	dac5      	bge.n	8002cb8 <_malloc_r+0x14>
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	2500      	movs	r5, #0
 8002d30:	6033      	str	r3, [r6, #0]
 8002d32:	0028      	movs	r0, r5
 8002d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d36:	6821      	ldr	r1, [r4, #0]
 8002d38:	1bc9      	subs	r1, r1, r7
 8002d3a:	d420      	bmi.n	8002d7e <_malloc_r+0xda>
 8002d3c:	290b      	cmp	r1, #11
 8002d3e:	d918      	bls.n	8002d72 <_malloc_r+0xce>
 8002d40:	19e2      	adds	r2, r4, r7
 8002d42:	6027      	str	r7, [r4, #0]
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	d112      	bne.n	8002d6e <_malloc_r+0xca>
 8002d48:	9b00      	ldr	r3, [sp, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	6053      	str	r3, [r2, #4]
 8002d52:	0030      	movs	r0, r6
 8002d54:	0025      	movs	r5, r4
 8002d56:	f000 f82f 	bl	8002db8 <__malloc_unlock>
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	350b      	adds	r5, #11
 8002d5e:	1d23      	adds	r3, r4, #4
 8002d60:	4395      	bics	r5, r2
 8002d62:	1aea      	subs	r2, r5, r3
 8002d64:	429d      	cmp	r5, r3
 8002d66:	d0e4      	beq.n	8002d32 <_malloc_r+0x8e>
 8002d68:	1b5b      	subs	r3, r3, r5
 8002d6a:	50a3      	str	r3, [r4, r2]
 8002d6c:	e7e1      	b.n	8002d32 <_malloc_r+0x8e>
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	e7ec      	b.n	8002d4c <_malloc_r+0xa8>
 8002d72:	6862      	ldr	r2, [r4, #4]
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	d1d5      	bne.n	8002d24 <_malloc_r+0x80>
 8002d78:	9b00      	ldr	r3, [sp, #0]
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e7e9      	b.n	8002d52 <_malloc_r+0xae>
 8002d7e:	0023      	movs	r3, r4
 8002d80:	6864      	ldr	r4, [r4, #4]
 8002d82:	e7a2      	b.n	8002cca <_malloc_r+0x26>
 8002d84:	002c      	movs	r4, r5
 8002d86:	686d      	ldr	r5, [r5, #4]
 8002d88:	e7ab      	b.n	8002ce2 <_malloc_r+0x3e>
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	e7c4      	b.n	8002d18 <_malloc_r+0x74>
 8002d8e:	230c      	movs	r3, #12
 8002d90:	0030      	movs	r0, r6
 8002d92:	6033      	str	r3, [r6, #0]
 8002d94:	f000 f810 	bl	8002db8 <__malloc_unlock>
 8002d98:	e7cb      	b.n	8002d32 <_malloc_r+0x8e>
 8002d9a:	6027      	str	r7, [r4, #0]
 8002d9c:	e7d9      	b.n	8002d52 <_malloc_r+0xae>
 8002d9e:	605b      	str	r3, [r3, #4]
 8002da0:	deff      	udf	#255	; 0xff
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	2000032c 	.word	0x2000032c

08002da8 <__malloc_lock>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4802      	ldr	r0, [pc, #8]	; (8002db4 <__malloc_lock+0xc>)
 8002dac:	f7ff ff0c 	bl	8002bc8 <__retarget_lock_acquire_recursive>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	20000328 	.word	0x20000328

08002db8 <__malloc_unlock>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <__malloc_unlock+0xc>)
 8002dbc:	f7ff ff05 	bl	8002bca <__retarget_lock_release_recursive>
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000328 	.word	0x20000328

08002dc8 <__sflush_r>:
 8002dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dca:	898b      	ldrh	r3, [r1, #12]
 8002dcc:	0005      	movs	r5, r0
 8002dce:	000c      	movs	r4, r1
 8002dd0:	071a      	lsls	r2, r3, #28
 8002dd2:	d45c      	bmi.n	8002e8e <__sflush_r+0xc6>
 8002dd4:	684a      	ldr	r2, [r1, #4]
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	dc04      	bgt.n	8002de4 <__sflush_r+0x1c>
 8002dda:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	dc01      	bgt.n	8002de4 <__sflush_r+0x1c>
 8002de0:	2000      	movs	r0, #0
 8002de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002de4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002de6:	2f00      	cmp	r7, #0
 8002de8:	d0fa      	beq.n	8002de0 <__sflush_r+0x18>
 8002dea:	2200      	movs	r2, #0
 8002dec:	2080      	movs	r0, #128	; 0x80
 8002dee:	682e      	ldr	r6, [r5, #0]
 8002df0:	602a      	str	r2, [r5, #0]
 8002df2:	001a      	movs	r2, r3
 8002df4:	0140      	lsls	r0, r0, #5
 8002df6:	6a21      	ldr	r1, [r4, #32]
 8002df8:	4002      	ands	r2, r0
 8002dfa:	4203      	tst	r3, r0
 8002dfc:	d034      	beq.n	8002e68 <__sflush_r+0xa0>
 8002dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	075b      	lsls	r3, r3, #29
 8002e04:	d506      	bpl.n	8002e14 <__sflush_r+0x4c>
 8002e06:	6863      	ldr	r3, [r4, #4]
 8002e08:	1ac0      	subs	r0, r0, r3
 8002e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <__sflush_r+0x4c>
 8002e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e12:	1ac0      	subs	r0, r0, r3
 8002e14:	0002      	movs	r2, r0
 8002e16:	2300      	movs	r3, #0
 8002e18:	0028      	movs	r0, r5
 8002e1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e1c:	6a21      	ldr	r1, [r4, #32]
 8002e1e:	47b8      	blx	r7
 8002e20:	89a2      	ldrh	r2, [r4, #12]
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d106      	bne.n	8002e34 <__sflush_r+0x6c>
 8002e26:	6829      	ldr	r1, [r5, #0]
 8002e28:	291d      	cmp	r1, #29
 8002e2a:	d82c      	bhi.n	8002e86 <__sflush_r+0xbe>
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <__sflush_r+0x110>)
 8002e2e:	410b      	asrs	r3, r1
 8002e30:	07db      	lsls	r3, r3, #31
 8002e32:	d428      	bmi.n	8002e86 <__sflush_r+0xbe>
 8002e34:	2300      	movs	r3, #0
 8002e36:	6063      	str	r3, [r4, #4]
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	04d2      	lsls	r2, r2, #19
 8002e3e:	d505      	bpl.n	8002e4c <__sflush_r+0x84>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <__sflush_r+0x82>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d100      	bne.n	8002e4c <__sflush_r+0x84>
 8002e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8002e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e4e:	602e      	str	r6, [r5, #0]
 8002e50:	2900      	cmp	r1, #0
 8002e52:	d0c5      	beq.n	8002de0 <__sflush_r+0x18>
 8002e54:	0023      	movs	r3, r4
 8002e56:	3344      	adds	r3, #68	; 0x44
 8002e58:	4299      	cmp	r1, r3
 8002e5a:	d002      	beq.n	8002e62 <__sflush_r+0x9a>
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	f7ff feb5 	bl	8002bcc <_free_r>
 8002e62:	2000      	movs	r0, #0
 8002e64:	6360      	str	r0, [r4, #52]	; 0x34
 8002e66:	e7bc      	b.n	8002de2 <__sflush_r+0x1a>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	47b8      	blx	r7
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d1c6      	bne.n	8002e00 <__sflush_r+0x38>
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0c3      	beq.n	8002e00 <__sflush_r+0x38>
 8002e78:	2b1d      	cmp	r3, #29
 8002e7a:	d001      	beq.n	8002e80 <__sflush_r+0xb8>
 8002e7c:	2b16      	cmp	r3, #22
 8002e7e:	d101      	bne.n	8002e84 <__sflush_r+0xbc>
 8002e80:	602e      	str	r6, [r5, #0]
 8002e82:	e7ad      	b.n	8002de0 <__sflush_r+0x18>
 8002e84:	89a2      	ldrh	r2, [r4, #12]
 8002e86:	2340      	movs	r3, #64	; 0x40
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	e7a9      	b.n	8002de2 <__sflush_r+0x1a>
 8002e8e:	690e      	ldr	r6, [r1, #16]
 8002e90:	2e00      	cmp	r6, #0
 8002e92:	d0a5      	beq.n	8002de0 <__sflush_r+0x18>
 8002e94:	680f      	ldr	r7, [r1, #0]
 8002e96:	600e      	str	r6, [r1, #0]
 8002e98:	1bba      	subs	r2, r7, r6
 8002e9a:	9201      	str	r2, [sp, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	079b      	lsls	r3, r3, #30
 8002ea0:	d100      	bne.n	8002ea4 <__sflush_r+0xdc>
 8002ea2:	694a      	ldr	r2, [r1, #20]
 8002ea4:	60a2      	str	r2, [r4, #8]
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	dd99      	ble.n	8002de0 <__sflush_r+0x18>
 8002eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eae:	0032      	movs	r2, r6
 8002eb0:	001f      	movs	r7, r3
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	6a21      	ldr	r1, [r4, #32]
 8002eb8:	47b8      	blx	r7
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	dc06      	bgt.n	8002ecc <__sflush_r+0x104>
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	89a2      	ldrh	r2, [r4, #12]
 8002ec4:	4240      	negs	r0, r0
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	e78a      	b.n	8002de2 <__sflush_r+0x1a>
 8002ecc:	9b01      	ldr	r3, [sp, #4]
 8002ece:	1836      	adds	r6, r6, r0
 8002ed0:	1a1b      	subs	r3, r3, r0
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	e7e7      	b.n	8002ea6 <__sflush_r+0xde>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	dfbffffe 	.word	0xdfbffffe

08002edc <_fflush_r>:
 8002edc:	690b      	ldr	r3, [r1, #16]
 8002ede:	b570      	push	{r4, r5, r6, lr}
 8002ee0:	0005      	movs	r5, r0
 8002ee2:	000c      	movs	r4, r1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <_fflush_r+0x12>
 8002ee8:	2500      	movs	r5, #0
 8002eea:	0028      	movs	r0, r5
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d004      	beq.n	8002efc <_fflush_r+0x20>
 8002ef2:	6a03      	ldr	r3, [r0, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <_fflush_r+0x20>
 8002ef8:	f7ff fc60 	bl	80027bc <__sinit>
 8002efc:	220c      	movs	r2, #12
 8002efe:	5ea3      	ldrsh	r3, [r4, r2]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f1      	beq.n	8002ee8 <_fflush_r+0xc>
 8002f04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f06:	07d2      	lsls	r2, r2, #31
 8002f08:	d404      	bmi.n	8002f14 <_fflush_r+0x38>
 8002f0a:	059b      	lsls	r3, r3, #22
 8002f0c:	d402      	bmi.n	8002f14 <_fflush_r+0x38>
 8002f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f10:	f7ff fe5a 	bl	8002bc8 <__retarget_lock_acquire_recursive>
 8002f14:	0028      	movs	r0, r5
 8002f16:	0021      	movs	r1, r4
 8002f18:	f7ff ff56 	bl	8002dc8 <__sflush_r>
 8002f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f1e:	0005      	movs	r5, r0
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d4e2      	bmi.n	8002eea <_fflush_r+0xe>
 8002f24:	89a3      	ldrh	r3, [r4, #12]
 8002f26:	059b      	lsls	r3, r3, #22
 8002f28:	d4df      	bmi.n	8002eea <_fflush_r+0xe>
 8002f2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f2c:	f7ff fe4d 	bl	8002bca <__retarget_lock_release_recursive>
 8002f30:	e7db      	b.n	8002eea <_fflush_r+0xe>
	...

08002f34 <__swhatbuf_r>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	000e      	movs	r6, r1
 8002f38:	001d      	movs	r5, r3
 8002f3a:	230e      	movs	r3, #14
 8002f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8002f3e:	0014      	movs	r4, r2
 8002f40:	b096      	sub	sp, #88	; 0x58
 8002f42:	2900      	cmp	r1, #0
 8002f44:	da0c      	bge.n	8002f60 <__swhatbuf_r+0x2c>
 8002f46:	89b2      	ldrh	r2, [r6, #12]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	421a      	tst	r2, r3
 8002f50:	d013      	beq.n	8002f7a <__swhatbuf_r+0x46>
 8002f52:	2100      	movs	r1, #0
 8002f54:	3b40      	subs	r3, #64	; 0x40
 8002f56:	2000      	movs	r0, #0
 8002f58:	6029      	str	r1, [r5, #0]
 8002f5a:	6023      	str	r3, [r4, #0]
 8002f5c:	b016      	add	sp, #88	; 0x58
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	466a      	mov	r2, sp
 8002f62:	f000 f84d 	bl	8003000 <_fstat_r>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	dbed      	blt.n	8002f46 <__swhatbuf_r+0x12>
 8002f6a:	23f0      	movs	r3, #240	; 0xf0
 8002f6c:	9901      	ldr	r1, [sp, #4]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	4019      	ands	r1, r3
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <__swhatbuf_r+0x4c>)
 8002f74:	18c9      	adds	r1, r1, r3
 8002f76:	424b      	negs	r3, r1
 8002f78:	4159      	adcs	r1, r3
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	e7ea      	b.n	8002f56 <__swhatbuf_r+0x22>
 8002f80:	ffffe000 	.word	0xffffe000

08002f84 <__smakebuf_r>:
 8002f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f86:	2602      	movs	r6, #2
 8002f88:	898b      	ldrh	r3, [r1, #12]
 8002f8a:	0005      	movs	r5, r0
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	4233      	tst	r3, r6
 8002f90:	d006      	beq.n	8002fa0 <__smakebuf_r+0x1c>
 8002f92:	0023      	movs	r3, r4
 8002f94:	3347      	adds	r3, #71	; 0x47
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	6123      	str	r3, [r4, #16]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	6163      	str	r3, [r4, #20]
 8002f9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002fa0:	466a      	mov	r2, sp
 8002fa2:	ab01      	add	r3, sp, #4
 8002fa4:	f7ff ffc6 	bl	8002f34 <__swhatbuf_r>
 8002fa8:	9900      	ldr	r1, [sp, #0]
 8002faa:	0007      	movs	r7, r0
 8002fac:	0028      	movs	r0, r5
 8002fae:	f7ff fe79 	bl	8002ca4 <_malloc_r>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d108      	bne.n	8002fc8 <__smakebuf_r+0x44>
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8002fba:	059a      	lsls	r2, r3, #22
 8002fbc:	d4ef      	bmi.n	8002f9e <__smakebuf_r+0x1a>
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	431e      	orrs	r6, r3
 8002fc4:	81a6      	strh	r6, [r4, #12]
 8002fc6:	e7e4      	b.n	8002f92 <__smakebuf_r+0xe>
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	89a2      	ldrh	r2, [r4, #12]
 8002fcc:	6020      	str	r0, [r4, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	9b00      	ldr	r3, [sp, #0]
 8002fd4:	6120      	str	r0, [r4, #16]
 8002fd6:	6163      	str	r3, [r4, #20]
 8002fd8:	9b01      	ldr	r3, [sp, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <__smakebuf_r+0x74>
 8002fde:	0028      	movs	r0, r5
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	5ee1      	ldrsh	r1, [r4, r3]
 8002fe4:	f000 f81e 	bl	8003024 <_isatty_r>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d005      	beq.n	8002ff8 <__smakebuf_r+0x74>
 8002fec:	2303      	movs	r3, #3
 8002fee:	89a2      	ldrh	r2, [r4, #12]
 8002ff0:	439a      	bics	r2, r3
 8002ff2:	3b02      	subs	r3, #2
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	81a3      	strh	r3, [r4, #12]
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	433b      	orrs	r3, r7
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	e7ce      	b.n	8002f9e <__smakebuf_r+0x1a>

08003000 <_fstat_r>:
 8003000:	2300      	movs	r3, #0
 8003002:	b570      	push	{r4, r5, r6, lr}
 8003004:	4d06      	ldr	r5, [pc, #24]	; (8003020 <_fstat_r+0x20>)
 8003006:	0004      	movs	r4, r0
 8003008:	0008      	movs	r0, r1
 800300a:	0011      	movs	r1, r2
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	f7fd fc2e 	bl	800086e <_fstat>
 8003012:	1c43      	adds	r3, r0, #1
 8003014:	d103      	bne.n	800301e <_fstat_r+0x1e>
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d000      	beq.n	800301e <_fstat_r+0x1e>
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	20000324 	.word	0x20000324

08003024 <_isatty_r>:
 8003024:	2300      	movs	r3, #0
 8003026:	b570      	push	{r4, r5, r6, lr}
 8003028:	4d06      	ldr	r5, [pc, #24]	; (8003044 <_isatty_r+0x20>)
 800302a:	0004      	movs	r4, r0
 800302c:	0008      	movs	r0, r1
 800302e:	602b      	str	r3, [r5, #0]
 8003030:	f7fd fc2b 	bl	800088a <_isatty>
 8003034:	1c43      	adds	r3, r0, #1
 8003036:	d103      	bne.n	8003040 <_isatty_r+0x1c>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d000      	beq.n	8003040 <_isatty_r+0x1c>
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	bd70      	pop	{r4, r5, r6, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	20000324 	.word	0x20000324

08003048 <_sbrk_r>:
 8003048:	2300      	movs	r3, #0
 800304a:	b570      	push	{r4, r5, r6, lr}
 800304c:	4d06      	ldr	r5, [pc, #24]	; (8003068 <_sbrk_r+0x20>)
 800304e:	0004      	movs	r4, r0
 8003050:	0008      	movs	r0, r1
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	f7fd fc2e 	bl	80008b4 <_sbrk>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d103      	bne.n	8003064 <_sbrk_r+0x1c>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d000      	beq.n	8003064 <_sbrk_r+0x1c>
 8003062:	6023      	str	r3, [r4, #0]
 8003064:	bd70      	pop	{r4, r5, r6, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	20000324 	.word	0x20000324

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
